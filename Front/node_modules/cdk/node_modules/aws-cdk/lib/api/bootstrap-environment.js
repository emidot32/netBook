"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const deploy_stack_1 = require("./deploy-stack");
// tslint:disable:max-line-length
/** @experimental */
exports.BUCKET_NAME_OUTPUT = 'BucketName';
/** @experimental */
exports.BUCKET_DOMAIN_NAME_OUTPUT = 'BucketDomainName';
/** @experimental */
async function bootstrapEnvironment(environment, aws, toolkitStackName, roleArn, props = {}) {
    const template = {
        Description: "The CDK Toolkit Stack. It was created by `cdk bootstrap` and manages resources necessary for managing your Cloud Applications with AWS CDK.",
        Resources: {
            StagingBucket: {
                Type: "AWS::S3::Bucket",
                Properties: {
                    BucketName: props.bucketName,
                    AccessControl: "Private",
                    BucketEncryption: {
                        ServerSideEncryptionConfiguration: [{
                                ServerSideEncryptionByDefault: {
                                    SSEAlgorithm: "aws:kms",
                                    KMSMasterKeyID: props.kmsKeyId,
                                },
                            }]
                    },
                    PublicAccessBlockConfiguration: {
                        BlockPublicAcls: true,
                        BlockPublicPolicy: true,
                        IgnorePublicAcls: true,
                        RestrictPublicBuckets: true,
                    },
                }
            }
        },
        Outputs: {
            [exports.BUCKET_NAME_OUTPUT]: {
                Description: "The name of the S3 bucket owned by the CDK toolkit stack",
                Value: { Ref: "StagingBucket" }
            },
            [exports.BUCKET_DOMAIN_NAME_OUTPUT]: {
                Description: "The domain name of the S3 bucket owned by the CDK toolkit stack",
                Value: { "Fn::GetAtt": ["StagingBucket", "RegionalDomainName"] }
            }
        }
    };
    const outdir = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk-bootstrap'));
    const builder = new cxapi.CloudAssemblyBuilder(outdir);
    const templateFile = `${toolkitStackName}.template.json`;
    await fs.writeJson(path.join(builder.outdir, templateFile), template, { spaces: 2 });
    builder.addArtifact(toolkitStackName, {
        type: cxapi.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format(environment.account, environment.region),
        properties: {
            templateFile
        },
    });
    const assembly = builder.buildAssembly();
    return await deploy_stack_1.deployStack({
        stack: assembly.getStackByName(toolkitStackName),
        sdk: aws, roleArn,
        tags: props.tags,
        execute: props.execute
    });
}
exports.bootstrapEnvironment = bootstrapEnvironment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLWVudmlyb25tZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwLWVudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQTBDO0FBQzFDLCtCQUFnQztBQUNoQyx5QkFBMEI7QUFDMUIsNkJBQThCO0FBRTlCLGlEQUFnRTtBQUdoRSxpQ0FBaUM7QUFFakMsb0JBQW9CO0FBQ1AsUUFBQSxrQkFBa0IsR0FBRyxZQUFZLENBQUM7QUFDL0Msb0JBQW9CO0FBQ1AsUUFBQSx5QkFBeUIsR0FBRyxrQkFBa0IsQ0FBQztBQTZCNUQsb0JBQW9CO0FBQ2IsS0FBSyxVQUFVLG9CQUFvQixDQUFDLFdBQThCLEVBQUUsR0FBUyxFQUFFLGdCQUF3QixFQUFFLE9BQTJCLEVBQUUsUUFBbUMsRUFBRTtJQUVoTCxNQUFNLFFBQVEsR0FBRztRQUNmLFdBQVcsRUFBRSw2SUFBNkk7UUFDMUosU0FBUyxFQUFFO1lBQ1QsYUFBYSxFQUFFO2dCQUNiLElBQUksRUFBRSxpQkFBaUI7Z0JBQ3ZCLFVBQVUsRUFBRTtvQkFDVixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7b0JBQzVCLGFBQWEsRUFBRSxTQUFTO29CQUN4QixnQkFBZ0IsRUFBRTt3QkFDaEIsaUNBQWlDLEVBQUUsQ0FBQztnQ0FDbEMsNkJBQTZCLEVBQUU7b0NBQzdCLFlBQVksRUFBRSxTQUFTO29DQUN2QixjQUFjLEVBQUUsS0FBSyxDQUFDLFFBQVE7aUNBQy9COzZCQUNGLENBQUM7cUJBQ0g7b0JBQ0QsOEJBQThCLEVBQUU7d0JBQzlCLGVBQWUsRUFBRSxJQUFJO3dCQUNyQixpQkFBaUIsRUFBRSxJQUFJO3dCQUN2QixnQkFBZ0IsRUFBRSxJQUFJO3dCQUN0QixxQkFBcUIsRUFBRSxJQUFJO3FCQUM1QjtpQkFDRjthQUNGO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUCxDQUFDLDBCQUFrQixDQUFDLEVBQUU7Z0JBQ3BCLFdBQVcsRUFBRSwwREFBMEQ7Z0JBQ3ZFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUU7YUFDaEM7WUFDRCxDQUFDLGlDQUF5QixDQUFDLEVBQUU7Z0JBQzNCLFdBQVcsRUFBRSxpRUFBaUU7Z0JBQzlFLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLGVBQWUsRUFBRSxvQkFBb0IsQ0FBQyxFQUFFO2FBQ2pFO1NBQ0Y7S0FDRixDQUFDO0lBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFDekUsTUFBTSxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkQsTUFBTSxZQUFZLEdBQUcsR0FBRyxnQkFBZ0IsZ0JBQWdCLENBQUM7SUFFekQsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVyRixPQUFPLENBQUMsV0FBVyxDQUFDLGdCQUFnQixFQUFFO1FBQ3BDLElBQUksRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLHdCQUF3QjtRQUNqRCxXQUFXLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFDbkYsVUFBVSxFQUFFO1lBQ1YsWUFBWTtTQUNiO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pDLE9BQU8sTUFBTSwwQkFBVyxDQUFDO1FBQ3ZCLEtBQUssRUFBRSxRQUFRLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDO1FBQ2hELEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTztRQUNqQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7UUFDaEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO0tBQ3ZCLENBQUMsQ0FBQztBQUNMLENBQUM7QUE1REQsb0RBNERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGN4YXBpID0gcmVxdWlyZSgnQGF3cy1jZGsvY3gtYXBpJyk7XG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IG9zID0gcmVxdWlyZSgnb3MnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IHtUYWd9IGZyb20gXCIuL2N4YXBwL3N0YWNrc1wiO1xuaW1wb3J0IHsgZGVwbG95U3RhY2ssIERlcGxveVN0YWNrUmVzdWx0IH0gZnJvbSAnLi9kZXBsb3ktc3RhY2snO1xuaW1wb3J0IHsgSVNESyB9IGZyb20gJy4vdXRpbC9zZGsnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGhcblxuLyoqIEBleHBlcmltZW50YWwgKi9cbmV4cG9ydCBjb25zdCBCVUNLRVRfTkFNRV9PVVRQVVQgPSAnQnVja2V0TmFtZSc7XG4vKiogQGV4cGVyaW1lbnRhbCAqL1xuZXhwb3J0IGNvbnN0IEJVQ0tFVF9ET01BSU5fTkFNRV9PVVRQVVQgPSAnQnVja2V0RG9tYWluTmFtZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQm9vdHN0cmFwRW52aXJvbm1lbnRQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSB0byBiZSBnaXZlbiB0byB0aGUgQ0RLIEJvb3RzdHJhcCBidWNrZXQuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gYSBuYW1lIGlzIGdlbmVyYXRlZCBieSBDbG91ZEZvcm1hdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IGJ1Y2tldE5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiBhbiBleGlzdGluZyBLTVMga2V5IHRvIGJlIHVzZWQgZm9yIGVuY3J5cHRpbmcgaXRlbXMgaW4gdGhlIGJ1Y2tldC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSB0aGUgZGVmYXVsdCBLTVMga2V5IGZvciBTMyB3aWxsIGJlIHVzZWQuXG4gICAqL1xuICByZWFkb25seSBrbXNLZXlJZD86IHN0cmluZztcbiAgLyoqXG4gICAqIFRhZ3MgZm9yIGNka3Rvb2xraXQgc3RhY2suXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gTm9uZS5cbiAgICovXG4gIHJlYWRvbmx5IHRhZ3M/OiBUYWdbXTtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZXhlY3V0ZSB0aGUgY2hhbmdlc2V0IG9yIG9ubHkgY3JlYXRlIGl0IGFuZCBsZWF2ZSBpdCBpbiByZXZpZXcuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHJlYWRvbmx5IGV4ZWN1dGU/OiBib29sZWFuO1xufVxuXG4vKiogQGV4cGVyaW1lbnRhbCAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJvb3RzdHJhcEVudmlyb25tZW50KGVudmlyb25tZW50OiBjeGFwaS5FbnZpcm9ubWVudCwgYXdzOiBJU0RLLCB0b29sa2l0U3RhY2tOYW1lOiBzdHJpbmcsIHJvbGVBcm46IHN0cmluZyB8IHVuZGVmaW5lZCwgcHJvcHM6IEJvb3RzdHJhcEVudmlyb25tZW50UHJvcHMgPSB7fSk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+IHtcblxuICBjb25zdCB0ZW1wbGF0ZSA9IHtcbiAgICBEZXNjcmlwdGlvbjogXCJUaGUgQ0RLIFRvb2xraXQgU3RhY2suIEl0IHdhcyBjcmVhdGVkIGJ5IGBjZGsgYm9vdHN0cmFwYCBhbmQgbWFuYWdlcyByZXNvdXJjZXMgbmVjZXNzYXJ5IGZvciBtYW5hZ2luZyB5b3VyIENsb3VkIEFwcGxpY2F0aW9ucyB3aXRoIEFXUyBDREsuXCIsXG4gICAgUmVzb3VyY2VzOiB7XG4gICAgICBTdGFnaW5nQnVja2V0OiB7XG4gICAgICAgIFR5cGU6IFwiQVdTOjpTMzo6QnVja2V0XCIsXG4gICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICBCdWNrZXROYW1lOiBwcm9wcy5idWNrZXROYW1lLFxuICAgICAgICAgIEFjY2Vzc0NvbnRyb2w6IFwiUHJpdmF0ZVwiLFxuICAgICAgICAgIEJ1Y2tldEVuY3J5cHRpb246IHtcbiAgICAgICAgICAgIFNlcnZlclNpZGVFbmNyeXB0aW9uQ29uZmlndXJhdGlvbjogW3tcbiAgICAgICAgICAgICAgU2VydmVyU2lkZUVuY3J5cHRpb25CeURlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBTU0VBbGdvcml0aG06IFwiYXdzOmttc1wiLFxuICAgICAgICAgICAgICAgIEtNU01hc3RlcktleUlEOiBwcm9wcy5rbXNLZXlJZCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH1dXG4gICAgICAgICAgfSxcbiAgICAgICAgICBQdWJsaWNBY2Nlc3NCbG9ja0NvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICAgIEJsb2NrUHVibGljQWNsczogdHJ1ZSxcbiAgICAgICAgICAgIEJsb2NrUHVibGljUG9saWN5OiB0cnVlLFxuICAgICAgICAgICAgSWdub3JlUHVibGljQWNsczogdHJ1ZSxcbiAgICAgICAgICAgIFJlc3RyaWN0UHVibGljQnVja2V0czogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBPdXRwdXRzOiB7XG4gICAgICBbQlVDS0VUX05BTUVfT1VUUFVUXToge1xuICAgICAgICBEZXNjcmlwdGlvbjogXCJUaGUgbmFtZSBvZiB0aGUgUzMgYnVja2V0IG93bmVkIGJ5IHRoZSBDREsgdG9vbGtpdCBzdGFja1wiLFxuICAgICAgICBWYWx1ZTogeyBSZWY6IFwiU3RhZ2luZ0J1Y2tldFwiIH1cbiAgICAgIH0sXG4gICAgICBbQlVDS0VUX0RPTUFJTl9OQU1FX09VVFBVVF06IHtcbiAgICAgICAgRGVzY3JpcHRpb246IFwiVGhlIGRvbWFpbiBuYW1lIG9mIHRoZSBTMyBidWNrZXQgb3duZWQgYnkgdGhlIENESyB0b29sa2l0IHN0YWNrXCIsXG4gICAgICAgIFZhbHVlOiB7IFwiRm46OkdldEF0dFwiOiBbXCJTdGFnaW5nQnVja2V0XCIsIFwiUmVnaW9uYWxEb21haW5OYW1lXCJdIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb3V0ZGlyID0gYXdhaXQgZnMubWtkdGVtcChwYXRoLmpvaW4ob3MudG1wZGlyKCksICdjZGstYm9vdHN0cmFwJykpO1xuICBjb25zdCBidWlsZGVyID0gbmV3IGN4YXBpLkNsb3VkQXNzZW1ibHlCdWlsZGVyKG91dGRpcik7XG4gIGNvbnN0IHRlbXBsYXRlRmlsZSA9IGAke3Rvb2xraXRTdGFja05hbWV9LnRlbXBsYXRlLmpzb25gO1xuXG4gIGF3YWl0IGZzLndyaXRlSnNvbihwYXRoLmpvaW4oYnVpbGRlci5vdXRkaXIsIHRlbXBsYXRlRmlsZSksIHRlbXBsYXRlLCB7IHNwYWNlczogMiB9KTtcblxuICBidWlsZGVyLmFkZEFydGlmYWN0KHRvb2xraXRTdGFja05hbWUsIHtcbiAgICB0eXBlOiBjeGFwaS5BcnRpZmFjdFR5cGUuQVdTX0NMT1VERk9STUFUSU9OX1NUQUNLLFxuICAgIGVudmlyb25tZW50OiBjeGFwaS5FbnZpcm9ubWVudFV0aWxzLmZvcm1hdChlbnZpcm9ubWVudC5hY2NvdW50LCBlbnZpcm9ubWVudC5yZWdpb24pLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHRlbXBsYXRlRmlsZVxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IGFzc2VtYmx5ID0gYnVpbGRlci5idWlsZEFzc2VtYmx5KCk7XG4gIHJldHVybiBhd2FpdCBkZXBsb3lTdGFjayh7XG4gICAgc3RhY2s6IGFzc2VtYmx5LmdldFN0YWNrQnlOYW1lKHRvb2xraXRTdGFja05hbWUpLFxuICAgIHNkazogYXdzLCByb2xlQXJuLFxuICAgIHRhZ3M6IHByb3BzLnRhZ3MsXG4gICAgZXhlY3V0ZTogcHJvcHMuZXhlY3V0ZVxuICB9KTtcbn1cbiJdfQ==