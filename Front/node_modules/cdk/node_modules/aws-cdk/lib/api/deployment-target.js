"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logging_1 = require("../logging");
const serialize_1 = require("../serialize");
const credentials_1 = require("./aws-auth/credentials");
const deploy_stack_1 = require("./deploy-stack");
const toolkit_info_1 = require("./toolkit-info");
exports.DEFAULT_TOOLKIT_STACK_NAME = 'CDKToolkit';
/**
 * Default provisioner (applies to CloudFormation).
 */
class CloudFormationDeploymentTarget {
    constructor(props) {
        this.aws = props.aws;
    }
    async readCurrentTemplate(stack) {
        logging_1.debug(`Reading existing template for stack ${stack.displayName}.`);
        const cfn = await this.aws.cloudFormation(stack.environment.account, stack.environment.region, credentials_1.Mode.ForReading);
        try {
            const response = await cfn.getTemplate({ StackName: stack.stackName }).promise();
            return (response.TemplateBody && serialize_1.deserializeStructure(response.TemplateBody)) || {};
        }
        catch (e) {
            if (e.code === 'ValidationError' && e.message === `Stack with id ${stack.stackName} does not exist`) {
                return {};
            }
            else {
                throw e;
            }
        }
    }
    async deployStack(options) {
        const toolkitInfo = await toolkit_info_1.loadToolkitInfo(options.stack.environment, this.aws, options.toolkitStackName || exports.DEFAULT_TOOLKIT_STACK_NAME);
        return deploy_stack_1.deployStack({
            stack: options.stack,
            deployName: options.deployName,
            roleArn: options.roleArn,
            notificationArns: options.notificationArns,
            quiet: options.quiet,
            sdk: this.aws,
            ci: options.ci,
            reuseAssets: options.reuseAssets,
            toolkitInfo,
            tags: options.tags,
            execute: options.execute
        });
    }
}
exports.CloudFormationDeploymentTarget = CloudFormationDeploymentTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95bWVudC10YXJnZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZXBsb3ltZW50LXRhcmdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHdDQUFtQztBQUNuQyw0Q0FBb0Q7QUFDcEQsd0RBQThDO0FBQzlDLGlEQUFnRTtBQUNoRSxpREFBaUQ7QUFHcEMsUUFBQSwwQkFBMEIsR0FBRyxZQUFZLENBQUM7QUErQnZEOztHQUVHO0FBQ0gsTUFBYSw4QkFBOEI7SUFHekMsWUFBWSxLQUF1QjtRQUNqQyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDdkIsQ0FBQztJQUVNLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxLQUFrQztRQUNqRSxlQUFLLENBQUMsdUNBQXVDLEtBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBRW5FLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsa0JBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoSCxJQUFJO1lBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2pGLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxJQUFJLGdDQUFvQixDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNyRjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLGlCQUFpQixJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssaUJBQWlCLEtBQUssQ0FBQyxTQUFTLGlCQUFpQixFQUFFO2dCQUNuRyxPQUFPLEVBQUUsQ0FBQzthQUNYO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxDQUFDO2FBQ1Q7U0FDRjtJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQTJCO1FBQ2xELE1BQU0sV0FBVyxHQUFHLE1BQU0sOEJBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsSUFBSSxrQ0FBMEIsQ0FBQyxDQUFDO1FBQ3ZJLE9BQU8sMEJBQVcsQ0FBQztZQUNqQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7WUFDcEIsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVO1lBQzlCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztZQUN4QixnQkFBZ0IsRUFBRSxPQUFPLENBQUMsZ0JBQWdCO1lBQzFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztZQUNwQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUU7WUFDZCxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7WUFDaEMsV0FBVztZQUNYLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtZQUNsQixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87U0FDekIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBdkNELHdFQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCB9IGZyb20gJ0Bhd3MtY2RrL2N4LWFwaSc7XG5pbXBvcnQgeyBUYWcgfSBmcm9tIFwiLi4vYXBpL2N4YXBwL3N0YWNrc1wiO1xuaW1wb3J0IHsgZGVidWcgfSBmcm9tICcuLi9sb2dnaW5nJztcbmltcG9ydCB7IGRlc2VyaWFsaXplU3RydWN0dXJlIH0gZnJvbSAnLi4vc2VyaWFsaXplJztcbmltcG9ydCB7IE1vZGUgfSBmcm9tICcuL2F3cy1hdXRoL2NyZWRlbnRpYWxzJztcbmltcG9ydCB7IGRlcGxveVN0YWNrLCBEZXBsb3lTdGFja1Jlc3VsdCB9IGZyb20gJy4vZGVwbG95LXN0YWNrJztcbmltcG9ydCB7IGxvYWRUb29sa2l0SW5mbyB9IGZyb20gJy4vdG9vbGtpdC1pbmZvJztcbmltcG9ydCB7IElTREsgfSBmcm9tICcuL3V0aWwvc2RrJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfVE9PTEtJVF9TVEFDS19OQU1FID0gJ0NES1Rvb2xraXQnO1xuXG5leHBvcnQgdHlwZSBUZW1wbGF0ZSA9IHsgW2tleTogc3RyaW5nXTogYW55IH07XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBwcm92aXNpb25lcnNcbiAqXG4gKiBQcm92aXNpb25lcnMgYXBwbHkgdGVtcGxhdGVzIHRvIHRoZSBjbG91ZCBpbmZyYXN0cnVjdHVyZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGVwbG95bWVudFRhcmdldCB7XG4gIHJlYWRDdXJyZW50VGVtcGxhdGUoc3RhY2s6IENsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCk6IFByb21pc2U8VGVtcGxhdGU+O1xuICBkZXBsb3lTdGFjayhvcHRpb25zOiBEZXBsb3lTdGFja09wdGlvbnMpOiBQcm9taXNlPERlcGxveVN0YWNrUmVzdWx0Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZXBsb3lTdGFja09wdGlvbnMge1xuICBzdGFjazogQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0O1xuICByb2xlQXJuPzogc3RyaW5nO1xuICBub3RpZmljYXRpb25Bcm5zPzogc3RyaW5nW107XG4gIGRlcGxveU5hbWU/OiBzdHJpbmc7XG4gIHF1aWV0PzogYm9vbGVhbjtcbiAgY2k/OiBib29sZWFuO1xuICB0b29sa2l0U3RhY2tOYW1lPzogc3RyaW5nO1xuICByZXVzZUFzc2V0cz86IHN0cmluZ1tdO1xuICB0YWdzPzogVGFnW107XG4gIGV4ZWN1dGU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3Zpc2lvbmVyUHJvcHMge1xuICBhd3M6IElTREs7XG59XG5cbi8qKlxuICogRGVmYXVsdCBwcm92aXNpb25lciAoYXBwbGllcyB0byBDbG91ZEZvcm1hdGlvbikuXG4gKi9cbmV4cG9ydCBjbGFzcyBDbG91ZEZvcm1hdGlvbkRlcGxveW1lbnRUYXJnZXQgaW1wbGVtZW50cyBJRGVwbG95bWVudFRhcmdldCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgYXdzOiBJU0RLO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm92aXNpb25lclByb3BzKSB7XG4gICAgdGhpcy5hd3MgPSBwcm9wcy5hd3M7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVhZEN1cnJlbnRUZW1wbGF0ZShzdGFjazogQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0KTogUHJvbWlzZTxUZW1wbGF0ZT4ge1xuICAgIGRlYnVnKGBSZWFkaW5nIGV4aXN0aW5nIHRlbXBsYXRlIGZvciBzdGFjayAke3N0YWNrLmRpc3BsYXlOYW1lfS5gKTtcblxuICAgIGNvbnN0IGNmbiA9IGF3YWl0IHRoaXMuYXdzLmNsb3VkRm9ybWF0aW9uKHN0YWNrLmVudmlyb25tZW50LmFjY291bnQsIHN0YWNrLmVudmlyb25tZW50LnJlZ2lvbiwgTW9kZS5Gb3JSZWFkaW5nKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjZm4uZ2V0VGVtcGxhdGUoeyBTdGFja05hbWU6IHN0YWNrLnN0YWNrTmFtZSB9KS5wcm9taXNlKCk7XG4gICAgICByZXR1cm4gKHJlc3BvbnNlLlRlbXBsYXRlQm9keSAmJiBkZXNlcmlhbGl6ZVN0cnVjdHVyZShyZXNwb25zZS5UZW1wbGF0ZUJvZHkpKSB8fCB7fTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5jb2RlID09PSAnVmFsaWRhdGlvbkVycm9yJyAmJiBlLm1lc3NhZ2UgPT09IGBTdGFjayB3aXRoIGlkICR7c3RhY2suc3RhY2tOYW1lfSBkb2VzIG5vdCBleGlzdGApIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVwbG95U3RhY2sob3B0aW9uczogRGVwbG95U3RhY2tPcHRpb25zKTogUHJvbWlzZTxEZXBsb3lTdGFja1Jlc3VsdD4ge1xuICAgIGNvbnN0IHRvb2xraXRJbmZvID0gYXdhaXQgbG9hZFRvb2xraXRJbmZvKG9wdGlvbnMuc3RhY2suZW52aXJvbm1lbnQsIHRoaXMuYXdzLCBvcHRpb25zLnRvb2xraXRTdGFja05hbWUgfHwgREVGQVVMVF9UT09MS0lUX1NUQUNLX05BTUUpO1xuICAgIHJldHVybiBkZXBsb3lTdGFjayh7XG4gICAgICBzdGFjazogb3B0aW9ucy5zdGFjayxcbiAgICAgIGRlcGxveU5hbWU6IG9wdGlvbnMuZGVwbG95TmFtZSxcbiAgICAgIHJvbGVBcm46IG9wdGlvbnMucm9sZUFybixcbiAgICAgIG5vdGlmaWNhdGlvbkFybnM6IG9wdGlvbnMubm90aWZpY2F0aW9uQXJucyxcbiAgICAgIHF1aWV0OiBvcHRpb25zLnF1aWV0LFxuICAgICAgc2RrOiB0aGlzLmF3cyxcbiAgICAgIGNpOiBvcHRpb25zLmNpLFxuICAgICAgcmV1c2VBc3NldHM6IG9wdGlvbnMucmV1c2VBc3NldHMsXG4gICAgICB0b29sa2l0SW5mbyxcbiAgICAgIHRhZ3M6IG9wdGlvbnMudGFncyxcbiAgICAgIGV4ZWN1dGU6IG9wdGlvbnMuZXhlY3V0ZVxuICAgIH0pO1xuICB9XG59XG4iXX0=