"use strict";
/**
 * A reimplementation of JS AWS SDK's SharedIniFile class
 *
 * We need that class to parse the ~/.aws/config file to determine the correct
 * region at runtime, but unfortunately it is private upstream.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
class SharedIniFile {
    constructor(options) {
        options = options || {};
        this.isConfig = options.isConfig === true;
        this.filename = options.filename || this.getDefaultFilepath();
    }
    async getProfile(profile) {
        await this.ensureFileLoaded();
        const profileIndex = profile !== AWS.util.defaultProfile && this.isConfig ?
            'profile ' + profile : profile;
        return this.parsedContents[profileIndex];
    }
    getDefaultFilepath() {
        return path.join(os.homedir(), '.aws', this.isConfig ? 'config' : 'credentials');
    }
    async ensureFileLoaded() {
        if (this.parsedContents) {
            return;
        }
        if (!await fs.pathExists(this.filename)) {
            this.parsedContents = {};
            return;
        }
        const contents = (await fs.readFile(this.filename)).toString();
        this.parsedContents = AWS.util.ini.parse(contents);
    }
}
exports.SharedIniFile = SharedIniFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2RrX2luaV9maWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2RrX2luaV9maWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRzs7QUFFSCwrQkFBZ0M7QUFDaEMsK0JBQWdDO0FBQ2hDLHlCQUEwQjtBQUMxQiw2QkFBOEI7QUFPOUIsTUFBYSxhQUFhO0lBS3hCLFlBQVksT0FBOEI7UUFDMUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQztRQUMxQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDOUQsQ0FBQztJQUVNLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBZTtRQUN2QyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRTlCLE1BQU0sWUFBWSxHQUFHLE9BQU8sS0FBTSxHQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEYsVUFBVSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBRWpDLE9BQU8sSUFBSSxDQUFDLGNBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRU8sa0JBQWtCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FDZCxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQ1osTUFBTSxFQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUN6QyxDQUFDO0lBQ0YsQ0FBQztJQUVPLEtBQUssQ0FBQyxnQkFBZ0I7UUFDOUIsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3ZCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO1lBQ3pCLE9BQU87U0FDUjtRQUVELE1BQU0sUUFBUSxHQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxjQUFjLEdBQUksR0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVELENBQUM7Q0FDRjtBQXpDRCxzQ0F5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgcmVpbXBsZW1lbnRhdGlvbiBvZiBKUyBBV1MgU0RLJ3MgU2hhcmVkSW5pRmlsZSBjbGFzc1xuICpcbiAqIFdlIG5lZWQgdGhhdCBjbGFzcyB0byBwYXJzZSB0aGUgfi8uYXdzL2NvbmZpZyBmaWxlIHRvIGRldGVybWluZSB0aGUgY29ycmVjdFxuICogcmVnaW9uIGF0IHJ1bnRpbWUsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGlzIHByaXZhdGUgdXBzdHJlYW0uXG4gKi9cblxuaW1wb3J0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcbmltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XG5pbXBvcnQgb3MgPSByZXF1aXJlKCdvcycpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2hhcmVkSW5pRmlsZU9wdGlvbnMge1xuICBpc0NvbmZpZz86IGJvb2xlYW47XG4gIGZpbGVuYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgU2hhcmVkSW5pRmlsZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaXNDb25maWc6IGJvb2xlYW47XG4gIHByaXZhdGUgcmVhZG9ubHkgZmlsZW5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSBwYXJzZWRDb250ZW50cz86IHtba2V5OiBzdHJpbmddOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfX07XG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucz86IFNoYXJlZEluaUZpbGVPcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB0aGlzLmlzQ29uZmlnID0gb3B0aW9ucy5pc0NvbmZpZyA9PT0gdHJ1ZTtcbiAgdGhpcy5maWxlbmFtZSA9IG9wdGlvbnMuZmlsZW5hbWUgfHwgdGhpcy5nZXREZWZhdWx0RmlsZXBhdGgoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRQcm9maWxlKHByb2ZpbGU6IHN0cmluZykge1xuICBhd2FpdCB0aGlzLmVuc3VyZUZpbGVMb2FkZWQoKTtcblxuICBjb25zdCBwcm9maWxlSW5kZXggPSBwcm9maWxlICE9PSAoQVdTIGFzIGFueSkudXRpbC5kZWZhdWx0UHJvZmlsZSAmJiB0aGlzLmlzQ29uZmlnID9cbiAgICAncHJvZmlsZSAnICsgcHJvZmlsZSA6IHByb2ZpbGU7XG5cbiAgcmV0dXJuIHRoaXMucGFyc2VkQ29udGVudHMhW3Byb2ZpbGVJbmRleF07XG4gIH1cblxuICBwcml2YXRlIGdldERlZmF1bHRGaWxlcGF0aCgpOiBzdHJpbmcge1xuICByZXR1cm4gcGF0aC5qb2luKFxuICAgIG9zLmhvbWVkaXIoKSxcbiAgICAnLmF3cycsXG4gICAgdGhpcy5pc0NvbmZpZyA/ICdjb25maWcnIDogJ2NyZWRlbnRpYWxzJ1xuICApO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBlbnN1cmVGaWxlTG9hZGVkKCkge1xuICBpZiAodGhpcy5wYXJzZWRDb250ZW50cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghYXdhaXQgZnMucGF0aEV4aXN0cyh0aGlzLmZpbGVuYW1lKSkge1xuICAgIHRoaXMucGFyc2VkQ29udGVudHMgPSB7fTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjb250ZW50czogc3RyaW5nID0gKGF3YWl0IGZzLnJlYWRGaWxlKHRoaXMuZmlsZW5hbWUpKS50b1N0cmluZygpO1xuICB0aGlzLnBhcnNlZENvbnRlbnRzID0gKEFXUyBhcyBhbnkpLnV0aWwuaW5pLnBhcnNlKGNvbnRlbnRzKTtcbiAgfVxufVxuIl19