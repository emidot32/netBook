import AWS = require('aws-sdk');
import { Mode } from '../aws-auth/credentials';
/** @experimental */
export interface ISDK {
    cloudFormation(account: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.CloudFormation>;
    ec2(account: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.EC2>;
    ssm(account: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.SSM>;
    s3(account: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.S3>;
    route53(account: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.Route53>;
    ecr(account: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.ECR>;
    defaultRegion(): Promise<string | undefined>;
    defaultAccount(): Promise<string | undefined>;
}
export interface SDKOptions {
    /**
     * Profile name to use
     *
     * @default No profile
     */
    profile?: string;
    /**
     * Proxy address to use
     *
     * @default No proxy
     */
    proxyAddress?: string;
    /**
     * Whether we should try instance credentials
     *
     * True/false to force/disable. Default is to guess.
     *
     * @default Automatically determine.
     */
    ec2creds?: boolean;
}
/**
 * Source for SDK client objects
 *
 * Credentials are first obtained from the SDK defaults (using environment variables and the
 * ~/.aws/{config,credentials} files).
 *
 * If those don't suffice, a list of CredentialProviderSources is interrogated for access
 * to the requested account.
 *
 * @experimental
 */
export declare class SDK implements ISDK {
    private readonly defaultAwsAccount;
    private readonly credentialsCache;
    private readonly profile?;
    /**
     * Default retry options for SDK clients
     *
     * Biggest bottleneck is CloudFormation, with a 1tps call rate. We want to be
     * a little more tenacious than the defaults, and with a little more breathing
     * room between calls (defaults are {retries=3, base=100}).
     *
     * I've left this running in a tight loop for an hour and the throttle errors
     * haven't escaped the retry mechanism.
     */
    private readonly retryOptions;
    constructor(options?: SDKOptions);
    cloudFormation(account: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.CloudFormation>;
    ec2(account: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.EC2>;
    ssm(account: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.SSM>;
    s3(account: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.S3>;
    route53(account: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.Route53>;
    ecr(account: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.ECR>;
    defaultRegion(): Promise<string | undefined>;
    defaultAccount(): Promise<string | undefined>;
    private resolveEnvironment;
}
