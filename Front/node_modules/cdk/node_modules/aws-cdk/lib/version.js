"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const colors = require("colors/safe");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const semver = require("semver");
const util_1 = require("util");
const logging_1 = require("../lib/logging");
const console_formatters_1 = require("../lib/util/console-formatters");
const ONE_DAY_IN_SECONDS = 1 * 24 * 60 * 60;
const exec = util_1.promisify(child_process_1.exec);
exports.DISPLAY_VERSION = `${versionNumber()} (build ${commit()})`;
function versionNumber() {
    return require('../package.json').version.replace(/\+[0-9a-f]+$/, '');
}
exports.versionNumber = versionNumber;
function commit() {
    return require('../build-info.json').commit;
}
class VersionCheckTTL {
    constructor(file, ttlSecs) {
        this.file = file || VersionCheckTTL.timestampFilePath();
        try {
            fs.mkdirsSync(path.dirname(this.file));
            fs.accessSync(path.dirname(this.file), fs.constants.W_OK);
        }
        catch (_a) {
            throw new Error(`Directory (${path.dirname(this.file)}) is not writable.`);
        }
        this.ttlSecs = ttlSecs || ONE_DAY_IN_SECONDS;
    }
    static timestampFilePath() {
        // Get the home directory from the OS, first. Fallback to $HOME.
        const homedir = os.userInfo().homedir || os.homedir();
        if (!homedir || !homedir.trim()) {
            throw new Error('Cannot determine home directory');
        }
        // Using the same path from account-cache.ts
        return path.join(homedir, '.cdk', 'cache', 'repo-version-ttl');
    }
    async hasExpired() {
        try {
            const lastCheckTime = (await fs.stat(this.file)).mtimeMs;
            const today = new Date().getTime();
            if ((today - lastCheckTime) / 1000 > this.ttlSecs) { // convert ms to sec
                return true;
            }
            return false;
        }
        catch (err) {
            if (err.code === 'ENOENT') {
                return true;
            }
            else {
                throw err;
            }
        }
    }
    async update(latestVersion) {
        if (!latestVersion) {
            latestVersion = '';
        }
        await fs.writeFile(this.file, latestVersion);
    }
}
exports.VersionCheckTTL = VersionCheckTTL;
// Export for unit testing only.
// Don't use directly, use displayVersionMessage() instead.
async function latestVersionIfHigher(currentVersion, cacheFile) {
    if (!(await cacheFile.hasExpired())) {
        return null;
    }
    const { stdout, stderr } = await exec(`npm view aws-cdk version`);
    if (stderr && stderr.trim().length > 0) {
        logging_1.debug(`The 'npm view' command generated an error stream with content [${stderr.trim()}]`);
    }
    const latestVersion = stdout.trim();
    if (!semver.valid(latestVersion)) {
        throw new Error(`npm returned an invalid semver ${latestVersion}`);
    }
    const isNewer = semver.gt(latestVersion, currentVersion);
    await cacheFile.update(latestVersion);
    if (isNewer) {
        return latestVersion;
    }
    else {
        return null;
    }
}
exports.latestVersionIfHigher = latestVersionIfHigher;
async function displayVersionMessage() {
    if (!process.stdout.isTTY) {
        return;
    }
    try {
        const versionCheckCache = new VersionCheckTTL();
        const laterVersion = await latestVersionIfHigher(versionNumber(), versionCheckCache);
        if (laterVersion) {
            const bannerMsg = console_formatters_1.formatAsBanner([
                `Newer version of CDK is available [${colors.green(laterVersion)}]`,
                `Upgrade recommended`,
            ]);
            bannerMsg.forEach((e) => logging_1.print(e));
        }
    }
    catch (err) {
        logging_1.debug(`Could not run version check - ${err.message}`);
    }
}
exports.displayVersionMessage = displayVersionMessage;
//# sourceMappingURL=data:application/json;base64,