"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const logging_1 = require("../logging");
const settings_1 = require("../settings");
const ami_1 = require("./ami");
const availability_zones_1 = require("./availability-zones");
const hosted_zones_1 = require("./hosted-zones");
const ssm_parameters_1 = require("./ssm-parameters");
const vpcs_1 = require("./vpcs");
/**
 * Iterate over the list of missing context values and invoke the appropriate providers from the map to retrieve them
 */
async function provideContextValues(missingValues, context, sdk) {
    for (const missingContext of missingValues) {
        const key = missingContext.key;
        const constructor = availableContextProviders[missingContext.provider];
        if (!constructor) {
            // tslint:disable-next-line:max-line-length
            throw new Error(`Unrecognized context provider name: ${missingContext.provider}. You might need to update the toolkit to match the version of the construct library.`);
        }
        const provider = new constructor(sdk);
        let value;
        try {
            value = await provider.getValue(missingContext.props);
        }
        catch (e) {
            // Set a specially formatted provider value which will be interpreted
            // as a lookup failure in the toolkit.
            value = { [cxapi.PROVIDER_ERROR_KEY]: e.message, [settings_1.TRANSIENT_CONTEXT_KEY]: true };
        }
        context.set(key, value);
        logging_1.debug(`Setting "${key}" context to ${JSON.stringify(value)}`);
    }
}
exports.provideContextValues = provideContextValues;
/**
 * Register a context provider
 *
 * (Only available for testing right now).
 */
function registerContextProvider(name, provider) {
    availableContextProviders[name] = provider;
}
exports.registerContextProvider = registerContextProvider;
const availableContextProviders = {
    [cxapi.AVAILABILITY_ZONE_PROVIDER]: availability_zones_1.AZContextProviderPlugin,
    [cxapi.SSM_PARAMETER_PROVIDER]: ssm_parameters_1.SSMContextProviderPlugin,
    [cxapi.HOSTED_ZONE_PROVIDER]: hosted_zones_1.HostedZoneContextProviderPlugin,
    [cxapi.VPC_PROVIDER]: vpcs_1.VpcNetworkContextProviderPlugin,
    [cxapi.AMI_PROVIDER]: ami_1.AmiContextProviderPlugin,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUEwQztBQUUxQyx3Q0FBbUM7QUFDbkMsMENBQTZEO0FBQzdELCtCQUFpRDtBQUNqRCw2REFBK0Q7QUFDL0QsaURBQWlFO0FBRWpFLHFEQUE0RDtBQUM1RCxpQ0FBeUQ7QUFLekQ7O0dBRUc7QUFDSSxLQUFLLFVBQVUsb0JBQW9CLENBQ3hDLGFBQXFDLEVBQ3JDLE9BQWdCLEVBQ2hCLEdBQVM7SUFFVCxLQUFLLE1BQU0sY0FBYyxJQUFJLGFBQWEsRUFBRTtRQUMxQyxNQUFNLEdBQUcsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDO1FBQy9CLE1BQU0sV0FBVyxHQUFHLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLDJDQUEyQztZQUMzQyxNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxjQUFjLENBQUMsUUFBUSx1RkFBdUYsQ0FBQyxDQUFDO1NBQ3hLO1FBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdEMsSUFBSSxLQUFLLENBQUM7UUFDVixJQUFJO1lBQ0YsS0FBSyxHQUFHLE1BQU0sUUFBUSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkQ7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLHFFQUFxRTtZQUNyRSxzQ0FBc0M7WUFDdEMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsZ0NBQXFCLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUNsRjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLGVBQUssQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQy9EO0FBQ0gsQ0FBQztBQTFCRCxvREEwQkM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0IsdUJBQXVCLENBQUMsSUFBWSxFQUFFLFFBQTZCO0lBQ2pGLHlCQUF5QixDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQztBQUM3QyxDQUFDO0FBRkQsMERBRUM7QUFFRCxNQUFNLHlCQUF5QixHQUFnQjtJQUM3QyxDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLDRDQUF1QjtJQUMzRCxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLHlDQUF3QjtJQUN4RCxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLDhDQUErQjtJQUM3RCxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBRSxzQ0FBK0I7SUFDckQsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUUsOEJBQXdCO0NBQy9DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3hhcGkgPSByZXF1aXJlKCdAYXdzLWNkay9jeC1hcGknKTtcbmltcG9ydCB7IElTREsgfSBmcm9tICcuLi9hcGkvdXRpbC9zZGsnO1xuaW1wb3J0IHsgZGVidWcgfSBmcm9tICcuLi9sb2dnaW5nJztcbmltcG9ydCB7IENvbnRleHQsIFRSQU5TSUVOVF9DT05URVhUX0tFWSB9IGZyb20gJy4uL3NldHRpbmdzJztcbmltcG9ydCB7IEFtaUNvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4vYW1pJztcbmltcG9ydCB7IEFaQ29udGV4dFByb3ZpZGVyUGx1Z2luIH0gZnJvbSAnLi9hdmFpbGFiaWxpdHktem9uZXMnO1xuaW1wb3J0IHsgSG9zdGVkWm9uZUNvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4vaG9zdGVkLXpvbmVzJztcbmltcG9ydCB7IENvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4vcHJvdmlkZXInO1xuaW1wb3J0IHsgU1NNQ29udGV4dFByb3ZpZGVyUGx1Z2luIH0gZnJvbSAnLi9zc20tcGFyYW1ldGVycyc7XG5pbXBvcnQgeyBWcGNOZXR3b3JrQ29udGV4dFByb3ZpZGVyUGx1Z2luIH0gZnJvbSAnLi92cGNzJztcblxudHlwZSBQcm92aWRlckNvbnN0cnVjdG9yID0gIChuZXcgKHNkazogSVNESykgPT4gQ29udGV4dFByb3ZpZGVyUGx1Z2luKTtcbmV4cG9ydCB0eXBlIFByb3ZpZGVyTWFwID0ge1tuYW1lOiBzdHJpbmddOiBQcm92aWRlckNvbnN0cnVjdG9yfTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgdGhlIGxpc3Qgb2YgbWlzc2luZyBjb250ZXh0IHZhbHVlcyBhbmQgaW52b2tlIHRoZSBhcHByb3ByaWF0ZSBwcm92aWRlcnMgZnJvbSB0aGUgbWFwIHRvIHJldHJpZXZlIHRoZW1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb3ZpZGVDb250ZXh0VmFsdWVzKFxuICBtaXNzaW5nVmFsdWVzOiBjeGFwaS5NaXNzaW5nQ29udGV4dFtdLFxuICBjb250ZXh0OiBDb250ZXh0LFxuICBzZGs6IElTREspIHtcblxuICBmb3IgKGNvbnN0IG1pc3NpbmdDb250ZXh0IG9mIG1pc3NpbmdWYWx1ZXMpIHtcbiAgICBjb25zdCBrZXkgPSBtaXNzaW5nQ29udGV4dC5rZXk7XG4gICAgY29uc3QgY29uc3RydWN0b3IgPSBhdmFpbGFibGVDb250ZXh0UHJvdmlkZXJzW21pc3NpbmdDb250ZXh0LnByb3ZpZGVyXTtcbiAgICBpZiAoIWNvbnN0cnVjdG9yKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVjb2duaXplZCBjb250ZXh0IHByb3ZpZGVyIG5hbWU6ICR7bWlzc2luZ0NvbnRleHQucHJvdmlkZXJ9LiBZb3UgbWlnaHQgbmVlZCB0byB1cGRhdGUgdGhlIHRvb2xraXQgdG8gbWF0Y2ggdGhlIHZlcnNpb24gb2YgdGhlIGNvbnN0cnVjdCBsaWJyYXJ5LmApO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IGNvbnN0cnVjdG9yKHNkayk7XG5cbiAgICBsZXQgdmFsdWU7XG4gICAgdHJ5IHtcbiAgICAgIHZhbHVlID0gYXdhaXQgcHJvdmlkZXIuZ2V0VmFsdWUobWlzc2luZ0NvbnRleHQucHJvcHMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFNldCBhIHNwZWNpYWxseSBmb3JtYXR0ZWQgcHJvdmlkZXIgdmFsdWUgd2hpY2ggd2lsbCBiZSBpbnRlcnByZXRlZFxuICAgICAgLy8gYXMgYSBsb29rdXAgZmFpbHVyZSBpbiB0aGUgdG9vbGtpdC5cbiAgICAgIHZhbHVlID0geyBbY3hhcGkuUFJPVklERVJfRVJST1JfS0VZXTogZS5tZXNzYWdlLCBbVFJBTlNJRU5UX0NPTlRFWFRfS0VZXTogdHJ1ZSB9O1xuICAgIH1cbiAgICBjb250ZXh0LnNldChrZXksIHZhbHVlKTtcbiAgICBkZWJ1ZyhgU2V0dGluZyBcIiR7a2V5fVwiIGNvbnRleHQgdG8gJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZWdpc3RlciBhIGNvbnRleHQgcHJvdmlkZXJcbiAqXG4gKiAoT25seSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgcmlnaHQgbm93KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyQ29udGV4dFByb3ZpZGVyKG5hbWU6IHN0cmluZywgcHJvdmlkZXI6IFByb3ZpZGVyQ29uc3RydWN0b3IpIHtcbiAgYXZhaWxhYmxlQ29udGV4dFByb3ZpZGVyc1tuYW1lXSA9IHByb3ZpZGVyO1xufVxuXG5jb25zdCBhdmFpbGFibGVDb250ZXh0UHJvdmlkZXJzOiBQcm92aWRlck1hcCA9IHtcbiAgW2N4YXBpLkFWQUlMQUJJTElUWV9aT05FX1BST1ZJREVSXTogQVpDb250ZXh0UHJvdmlkZXJQbHVnaW4sXG4gIFtjeGFwaS5TU01fUEFSQU1FVEVSX1BST1ZJREVSXTogU1NNQ29udGV4dFByb3ZpZGVyUGx1Z2luLFxuICBbY3hhcGkuSE9TVEVEX1pPTkVfUFJPVklERVJdOiBIb3N0ZWRab25lQ29udGV4dFByb3ZpZGVyUGx1Z2luLFxuICBbY3hhcGkuVlBDX1BST1ZJREVSXTogVnBjTmV0d29ya0NvbnRleHRQcm92aWRlclBsdWdpbixcbiAgW2N4YXBpLkFNSV9QUk9WSURFUl06IEFtaUNvbnRleHRQcm92aWRlclBsdWdpbixcbn07XG4iXX0=