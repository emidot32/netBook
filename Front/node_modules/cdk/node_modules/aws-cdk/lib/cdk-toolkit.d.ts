/// <reference types="node" />
import { AppStacks, Tag } from "./api/cxapp/stacks";
import { IDeploymentTarget } from './api/deployment-target';
import { ISDK } from './api/util/sdk';
import { RequireApproval } from './diff';
export interface CdkToolkitProps {
    /**
     * The (stacks of the) CDK application
     */
    appStacks: AppStacks;
    /**
     * The provisioning engine used to apply changes to the cloud
     */
    provisioner: IDeploymentTarget;
}
/**
 * Toolkit logic
 *
 * The toolkit takes CDK app models from the `appStacks`
 * object and applies them to the `provisioner`.
 */
export declare class CdkToolkit {
    private readonly appStacks;
    private readonly provisioner;
    constructor(props: CdkToolkitProps);
    diff(options: DiffOptions): Promise<number>;
    deploy(options: DeployOptions): Promise<void>;
    destroy(options: DestroyOptions): Promise<void>;
}
export interface DiffOptions {
    /**
     * Stack names to diff
     */
    stackNames: string[];
    /**
     * Only select the given stack
     *
     * @default false
     */
    exclusively?: boolean;
    /**
     * Used a template from disk instead of from the server
     *
     * @default Use from the server
     */
    templatePath?: string;
    /**
     * Strict diff mode
     *
     * @default false
     */
    strict?: boolean;
    /**
     * How many lines of context to show in the diff
     *
     * @default 3
     */
    contextLines?: number;
    /**
     * Where to write the default
     *
     * @default stderr
     */
    stream?: NodeJS.WritableStream;
}
export interface DeployOptions {
    /**
     * Stack names to deploy
     */
    stackNames: string[];
    /**
     * Only select the given stack
     *
     * @default false
     */
    exclusively?: boolean;
    /**
     * Name of the toolkit stack to use/deploy
     *
     * @default CDKToolkit
     */
    toolkitStackName?: string;
    /**
     * Role to pass to CloudFormation for deployment
     */
    roleArn?: string;
    /**
     * ARNs of SNS topics that CloudFormation will notify with stack related events
     */
    notificationArns?: string[];
    /**
     * What kind of security changes require approval
     *
     * @default RequireApproval.Broadening
     */
    requireApproval?: RequireApproval;
    /**
     * Whether we're in CI mode
     *
     * @default false
     */
    ci?: boolean;
    /**
     * Reuse the assets with the given asset IDs
     */
    reuseAssets?: string[];
    /**
     * Tags to pass to CloudFormation for deployment
     */
    tags?: Tag[];
    /**
     * AWS SDK
     */
    sdk: ISDK;
    /**
     * Whether to execute the ChangeSet
     * Not providing `execute` parameter will result in execution of ChangeSet
     * @default true
     */
    execute?: boolean;
}
export interface DestroyOptions {
    /**
     * The names of the stacks to delete
     */
    stackNames: string[];
    /**
     * Whether to exclude stacks that depend on the stacks to be deleted
     */
    exclusively: boolean;
    /**
     * Whether to skip prompting for confirmation
     */
    force: boolean;
    /**
     * The arn of the IAM role to use
     */
    roleArn?: string;
    /**
     * AWS SDK
     */
    sdk: ISDK;
    /**
     * Whether the destroy request came from a deploy.
     */
    fromDeploy?: boolean;
}
