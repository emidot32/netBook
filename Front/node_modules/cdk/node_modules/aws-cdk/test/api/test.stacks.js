"use strict";
const cxapi = require("@aws-cdk/cx-api");
const nodeunit_1 = require("nodeunit");
const lib_1 = require("../../lib");
const stacks_1 = require("../../lib/api/cxapp/stacks");
const context_providers_1 = require("../../lib/context-providers");
const settings_1 = require("../../lib/settings");
const util_1 = require("../util");
function testStacks({ env, versionReporting = true } = {}) {
    const configuration = new settings_1.Configuration();
    configuration.settings.set(['versionReporting'], versionReporting);
    return new stacks_1.AppStacks({
        configuration,
        aws: new lib_1.SDK(),
        synthesizer: async () => util_1.testAssembly({
            stacks: [{
                    stackName: 'withouterrors',
                    env,
                    template: { resource: 'noerrorresource' },
                },
                {
                    stackName: 'witherrors',
                    env,
                    template: { resource: 'errorresource' },
                    metadata: {
                        '/resource': [
                            {
                                type: cxapi.ERROR_METADATA_KEY,
                                data: 'this is an error'
                            }
                        ]
                    },
                }]
        }),
    });
}
module.exports = nodeunit_1.testCase({
    async 'do not throw when selecting stack without errors'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        const selected = await stacks.selectStacks(['withouterrors'], {
            defaultBehavior: stacks_1.DefaultSelection.AllStacks
        });
        stacks.processMetadata(selected);
        // THEN
        test.equal(selected[0].template.resource, 'noerrorresource');
        test.done();
    },
    async 'do throw when selecting stack with errors'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        try {
            const selected = await stacks.selectStacks(['witherrors'], {
                defaultBehavior: stacks_1.DefaultSelection.AllStacks
            });
            stacks.processMetadata(selected);
            test.ok(false, 'Did not get exception');
        }
        catch (e) {
            test.ok(/Found errors/.test(e.toString()), 'Wrong error');
        }
        test.done();
    },
    async 'select behavior: all'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        const x = await stacks.selectStacks([], { defaultBehavior: stacks_1.DefaultSelection.AllStacks });
        // THEN
        test.deepEqual(x.length, 2);
        test.done();
    },
    async 'select behavior: none'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        const x = await stacks.selectStacks([], { defaultBehavior: stacks_1.DefaultSelection.None });
        // THEN
        test.deepEqual(x.length, 0);
        test.done();
    },
    async 'select behavior: single'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        let thrown;
        try {
            await stacks.selectStacks([], { defaultBehavior: stacks_1.DefaultSelection.OnlySingle });
        }
        catch (e) {
            thrown = e.message;
        }
        // THEN
        test.ok(thrown && thrown.includes('Since this app includes more than a single stack, specify which stacks to use (wildcards are supported)'));
        test.done();
    },
    'AWS::CDK::Metadata': {
        async 'is generated for relocatable stacks'(test) {
            const stacks = testStacks({ env: `aws://${cxapi.UNKNOWN_ACCOUNT}/${cxapi.UNKNOWN_REGION}`, versionReporting: true });
            const result = await stacks.synthesizeStack('withouterrors');
            const metadata = result.template.Resources && result.template.Resources.CDKMetadata;
            test.deepEqual(metadata, {
                Type: 'AWS::CDK::Metadata',
                Properties: {
                    Modules: `${require('../../package.json').name}=${require('../../package.json').version}`
                },
                Condition: 'CDKMetadataAvailable',
            });
            test.notEqual(null, result.template.Conditions && result.template.Conditions.CDKMetadataAvailable);
            test.done();
        },
        async 'is generated for stacks in supported regions'(test) {
            const stacks = testStacks({ env: 'aws://012345678912/us-east-1', versionReporting: true });
            const result = await stacks.synthesizeStack('withouterrors');
            const metadata = result.template.Resources && result.template.Resources.CDKMetadata;
            test.deepEqual(metadata, {
                Type: 'AWS::CDK::Metadata',
                Properties: {
                    Modules: `${require('../../package.json').name}=${require('../../package.json').version}`
                }
            });
            test.done();
        },
        async 'is not generated for stacks in unsupported regions'(test) {
            const stacks = testStacks({ env: 'aws://012345678912/bermuda-triangle-1337', versionReporting: true });
            const result = await stacks.synthesizeStack('withouterrors');
            const metadata = result.template.Resources && result.template.Resources.CDKMetadata;
            test.equal(metadata, undefined);
            test.done();
        }
    },
    async 'stop executing if context providers are not making progress'(test) {
        context_providers_1.registerContextProvider('testprovider', class {
            async getValue(_) {
                return 'foo';
            }
        });
        const stacks = new stacks_1.AppStacks({
            configuration: new settings_1.Configuration(),
            aws: new lib_1.SDK(),
            synthesizer: async () => util_1.testAssembly({
                stacks: [{
                        stackName: 'thestack',
                        template: { resource: 'noerrorresource' },
                    }],
                // Always return the same missing keys, synthesis should still finish.
                missing: [
                    { key: 'abcdef', props: {}, provider: 'testprovider' }
                ]
            }),
        });
        // WHEN
        await stacks.selectStacks(['thestack'], { defaultBehavior: stacks_1.DefaultSelection.AllStacks });
        // THEN: the test finishes normally
        test.done();
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zdGFja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LnN0YWNrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEseUNBQTBDO0FBQzFDLHVDQUEwQztBQUMxQyxtQ0FBZ0M7QUFDaEMsdURBQXlFO0FBQ3pFLG1FQUFzRTtBQUN0RSxpREFBbUQ7QUFDbkQsa0NBQXVDO0FBMEp2QyxTQUFTLFVBQVUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxJQUFJLEtBQW1ELEVBQUU7SUFDckcsTUFBTSxhQUFhLEdBQUcsSUFBSSx3QkFBYSxFQUFFLENBQUM7SUFDMUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFFbkUsT0FBTyxJQUFJLGtCQUFTLENBQUM7UUFDbkIsYUFBYTtRQUNiLEdBQUcsRUFBRSxJQUFJLFNBQUcsRUFBRTtRQUNkLFdBQVcsRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLG1CQUFZLENBQUM7WUFDcEMsTUFBTSxFQUFFLENBQUM7b0JBQ1AsU0FBUyxFQUFFLGVBQWU7b0JBQzFCLEdBQUc7b0JBQ0gsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFO2lCQUMxQztnQkFDRDtvQkFDRSxTQUFTLEVBQUUsWUFBWTtvQkFDdkIsR0FBRztvQkFDSCxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFO29CQUN2QyxRQUFRLEVBQUU7d0JBQ1IsV0FBVyxFQUFFOzRCQUNYO2dDQUNFLElBQUksRUFBRSxLQUFLLENBQUMsa0JBQWtCO2dDQUM5QixJQUFJLEVBQUUsa0JBQWtCOzZCQUN6Qjt5QkFDRjtxQkFDRjtpQkFDRixDQUFDO1NBQ0gsQ0FBQztLQUNILENBQUMsQ0FBQztBQUNMLENBQUM7QUFwTEQsaUJBQVMsbUJBQVEsQ0FBQztJQUNoQixLQUFLLENBQUMsa0RBQWtELENBQUMsSUFBVTtRQUNqRSxR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QWEsRUFBRTtZQUNsQyxHQUFHLEVBQUUsSUFBSSxTQUFHLEVBQUU7WUFDZCxXQUFXLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxtQkFBWSxDQUFDO2dCQUNwQyxNQUFNLEVBQUUsQ0FBRTt3QkFDUixTQUFTLEVBQUUsVUFBVTt3QkFDckIsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFO3FCQUMxQyxDQUFDO2dCQUNGLHNFQUFzRTtnQkFDdEUsT0FBTyxFQUFFO29CQUNQLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUU7aUJBQ3ZEO2FBQ0YsQ0FBQztTQUNILENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxNQUFNLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLGVBQWUsRUFBRSx5QkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBRXpGLG1DQUFtQztRQUNuQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGN4YXBpID0gcmVxdWlyZSgnQGF3cy1jZGsvY3gtYXBpJyk7XG5pbXBvcnQgeyBUZXN0LCB0ZXN0Q2FzZSB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IFNESyB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgeyBBcHBTdGFja3MsIERlZmF1bHRTZWxlY3Rpb24gfSBmcm9tICcuLi8uLi9saWIvYXBpL2N4YXBwL3N0YWNrcyc7XG5pbXBvcnQgeyByZWdpc3RlckNvbnRleHRQcm92aWRlciB9IGZyb20gJy4uLy4uL2xpYi9jb250ZXh0LXByb3ZpZGVycyc7XG5pbXBvcnQgeyBDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vLi4vbGliL3NldHRpbmdzJztcbmltcG9ydCB7IHRlc3RBc3NlbWJseSB9IGZyb20gJy4uL3V0aWwnO1xuXG5leHBvcnQgPSB0ZXN0Q2FzZSh7XG4gIGFzeW5jICdkbyBub3QgdGhyb3cgd2hlbiBzZWxlY3Rpbmcgc3RhY2sgd2l0aG91dCBlcnJvcnMnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrcyA9IHRlc3RTdGFja3MoKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBzZWxlY3RlZCA9IGF3YWl0IHN0YWNrcy5zZWxlY3RTdGFja3MoWyd3aXRob3V0ZXJyb3JzJ10sIHtcbiAgICAgIGRlZmF1bHRCZWhhdmlvcjogRGVmYXVsdFNlbGVjdGlvbi5BbGxTdGFja3NcbiAgICB9KTtcbiAgICBzdGFja3MucHJvY2Vzc01ldGFkYXRhKHNlbGVjdGVkKTtcblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0LmVxdWFsKHNlbGVjdGVkWzBdLnRlbXBsYXRlLnJlc291cmNlLCAnbm9lcnJvcnJlc291cmNlJyk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICBhc3luYyAnZG8gdGhyb3cgd2hlbiBzZWxlY3Rpbmcgc3RhY2sgd2l0aCBlcnJvcnMnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrcyA9IHRlc3RTdGFja3MoKTtcblxuICAgIC8vIFdIRU5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBhd2FpdCBzdGFja3Muc2VsZWN0U3RhY2tzKFsnd2l0aGVycm9ycyddLCB7XG4gICAgICAgIGRlZmF1bHRCZWhhdmlvcjogRGVmYXVsdFNlbGVjdGlvbi5BbGxTdGFja3NcbiAgICAgIH0pO1xuICAgICAgc3RhY2tzLnByb2Nlc3NNZXRhZGF0YShzZWxlY3RlZCk7XG5cbiAgICAgIHRlc3Qub2soZmFsc2UsICdEaWQgbm90IGdldCBleGNlcHRpb24nKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0ZXN0Lm9rKC9Gb3VuZCBlcnJvcnMvLnRlc3QoZS50b1N0cmluZygpKSwgJ1dyb25nIGVycm9yJyk7XG4gICAgfVxuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ3NlbGVjdCBiZWhhdmlvcjogYWxsJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFja3MgPSB0ZXN0U3RhY2tzKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgeCA9IGF3YWl0IHN0YWNrcy5zZWxlY3RTdGFja3MoW10sIHsgZGVmYXVsdEJlaGF2aW9yOiBEZWZhdWx0U2VsZWN0aW9uLkFsbFN0YWNrcyB9KTtcblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0LmRlZXBFcXVhbCh4Lmxlbmd0aCwgMik7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ3NlbGVjdCBiZWhhdmlvcjogbm9uZScodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2tzID0gdGVzdFN0YWNrcygpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHggPSBhd2FpdCBzdGFja3Muc2VsZWN0U3RhY2tzKFtdLCB7IGRlZmF1bHRCZWhhdmlvcjogRGVmYXVsdFNlbGVjdGlvbi5Ob25lIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZGVlcEVxdWFsKHgubGVuZ3RoLCAwKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICBhc3luYyAnc2VsZWN0IGJlaGF2aW9yOiBzaW5nbGUnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrcyA9IHRlc3RTdGFja3MoKTtcblxuICAgIC8vIFdIRU5cbiAgICBsZXQgdGhyb3duOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHN0YWNrcy5zZWxlY3RTdGFja3MoW10sIHsgZGVmYXVsdEJlaGF2aW9yOiBEZWZhdWx0U2VsZWN0aW9uLk9ubHlTaW5nbGUgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3duID0gZS5tZXNzYWdlO1xuICAgIH1cblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0Lm9rKHRocm93biAmJiB0aHJvd24uaW5jbHVkZXMoJ1NpbmNlIHRoaXMgYXBwIGluY2x1ZGVzIG1vcmUgdGhhbiBhIHNpbmdsZSBzdGFjaywgc3BlY2lmeSB3aGljaCBzdGFja3MgdG8gdXNlICh3aWxkY2FyZHMgYXJlIHN1cHBvcnRlZCknKSk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ0FXUzo6Q0RLOjpNZXRhZGF0YSc6IHtcbiAgICBhc3luYyAnaXMgZ2VuZXJhdGVkIGZvciByZWxvY2F0YWJsZSBzdGFja3MnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IHN0YWNrcyA9IHRlc3RTdGFja3MoeyBlbnY6IGBhd3M6Ly8ke2N4YXBpLlVOS05PV05fQUNDT1VOVH0vJHtjeGFwaS5VTktOT1dOX1JFR0lPTn1gLCB2ZXJzaW9uUmVwb3J0aW5nOiB0cnVlIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdGFja3Muc3ludGhlc2l6ZVN0YWNrKCd3aXRob3V0ZXJyb3JzJyk7XG4gICAgICBjb25zdCBtZXRhZGF0YSA9IHJlc3VsdC50ZW1wbGF0ZS5SZXNvdXJjZXMgJiYgcmVzdWx0LnRlbXBsYXRlLlJlc291cmNlcy5DREtNZXRhZGF0YTtcbiAgICAgIHRlc3QuZGVlcEVxdWFsKG1ldGFkYXRhLCB7XG4gICAgICAgIFR5cGU6ICdBV1M6OkNESzo6TWV0YWRhdGEnLFxuICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgTW9kdWxlczogYCR7cmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykubmFtZX09JHtyZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9ufWBcbiAgICAgICAgfSxcbiAgICAgICAgQ29uZGl0aW9uOiAnQ0RLTWV0YWRhdGFBdmFpbGFibGUnLFxuICAgICAgfSk7XG5cbiAgICAgIHRlc3Qubm90RXF1YWwobnVsbCwgcmVzdWx0LnRlbXBsYXRlLkNvbmRpdGlvbnMgJiYgcmVzdWx0LnRlbXBsYXRlLkNvbmRpdGlvbnMuQ0RLTWV0YWRhdGFBdmFpbGFibGUpO1xuXG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgJ2lzIGdlbmVyYXRlZCBmb3Igc3RhY2tzIGluIHN1cHBvcnRlZCByZWdpb25zJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBzdGFja3MgPSB0ZXN0U3RhY2tzKHsgZW52OiAnYXdzOi8vMDEyMzQ1Njc4OTEyL3VzLWVhc3QtMScsIHZlcnNpb25SZXBvcnRpbmc6IHRydWUgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0YWNrcy5zeW50aGVzaXplU3RhY2soJ3dpdGhvdXRlcnJvcnMnKTtcbiAgICAgIGNvbnN0IG1ldGFkYXRhID0gcmVzdWx0LnRlbXBsYXRlLlJlc291cmNlcyAmJiByZXN1bHQudGVtcGxhdGUuUmVzb3VyY2VzLkNES01ldGFkYXRhO1xuICAgICAgdGVzdC5kZWVwRXF1YWwobWV0YWRhdGEsIHtcbiAgICAgICAgVHlwZTogJ0FXUzo6Q0RLOjpNZXRhZGF0YScsXG4gICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICBNb2R1bGVzOiBgJHtyZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKS5uYW1lfT0ke3JlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb259YFxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgIGFzeW5jICdpcyBub3QgZ2VuZXJhdGVkIGZvciBzdGFja3MgaW4gdW5zdXBwb3J0ZWQgcmVnaW9ucycodGVzdDogVGVzdCkge1xuICAgICAgY29uc3Qgc3RhY2tzID0gdGVzdFN0YWNrcyh7IGVudjogJ2F3czovLzAxMjM0NTY3ODkxMi9iZXJtdWRhLXRyaWFuZ2xlLTEzMzcnLCB2ZXJzaW9uUmVwb3J0aW5nOiB0cnVlIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdGFja3Muc3ludGhlc2l6ZVN0YWNrKCd3aXRob3V0ZXJyb3JzJyk7XG4gICAgICBjb25zdCBtZXRhZGF0YSA9IHJlc3VsdC50ZW1wbGF0ZS5SZXNvdXJjZXMgJiYgcmVzdWx0LnRlbXBsYXRlLlJlc291cmNlcy5DREtNZXRhZGF0YTtcbiAgICAgIHRlc3QuZXF1YWwobWV0YWRhdGEsIHVuZGVmaW5lZCk7XG5cbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH1cbiAgfSxcblxuICBhc3luYyAnc3RvcCBleGVjdXRpbmcgaWYgY29udGV4dCBwcm92aWRlcnMgYXJlIG5vdCBtYWtpbmcgcHJvZ3Jlc3MnKHRlc3Q6IFRlc3QpIHtcbiAgICByZWdpc3RlckNvbnRleHRQcm92aWRlcigndGVzdHByb3ZpZGVyJywgY2xhc3Mge1xuICAgICAgcHVibGljIGFzeW5jIGdldFZhbHVlKF86IHtba2V5OiBzdHJpbmddOiBhbnl9KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuICdmb28nO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3RhY2tzID0gbmV3IEFwcFN0YWNrcyh7XG4gICAgICBjb25maWd1cmF0aW9uOiBuZXcgQ29uZmlndXJhdGlvbigpLFxuICAgICAgYXdzOiBuZXcgU0RLKCksXG4gICAgICBzeW50aGVzaXplcjogYXN5bmMgKCkgPT4gdGVzdEFzc2VtYmx5KHtcbiAgICAgICAgc3RhY2tzOiBbIHtcbiAgICAgICAgICBzdGFja05hbWU6ICd0aGVzdGFjaycsXG4gICAgICAgICAgdGVtcGxhdGU6IHsgcmVzb3VyY2U6ICdub2Vycm9ycmVzb3VyY2UnIH0sXG4gICAgICAgIH1dLFxuICAgICAgICAvLyBBbHdheXMgcmV0dXJuIHRoZSBzYW1lIG1pc3Npbmcga2V5cywgc3ludGhlc2lzIHNob3VsZCBzdGlsbCBmaW5pc2guXG4gICAgICAgIG1pc3Npbmc6IFtcbiAgICAgICAgICB7IGtleTogJ2FiY2RlZicsIHByb3BzOiB7fSwgcHJvdmlkZXI6ICd0ZXN0cHJvdmlkZXInIH1cbiAgICAgICAgXVxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXdhaXQgc3RhY2tzLnNlbGVjdFN0YWNrcyhbJ3RoZXN0YWNrJ10sIHsgZGVmYXVsdEJlaGF2aW9yOiBEZWZhdWx0U2VsZWN0aW9uLkFsbFN0YWNrcyB9KTtcblxuICAgIC8vIFRIRU46IHRoZSB0ZXN0IGZpbmlzaGVzIG5vcm1hbGx5XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG59KTtcblxuZnVuY3Rpb24gdGVzdFN0YWNrcyh7IGVudiwgdmVyc2lvblJlcG9ydGluZyA9IHRydWUgfTogeyBlbnY/OiBzdHJpbmcsIHZlcnNpb25SZXBvcnRpbmc/OiBib29sZWFuIH0gPSB7fSkge1xuICBjb25zdCBjb25maWd1cmF0aW9uID0gbmV3IENvbmZpZ3VyYXRpb24oKTtcbiAgY29uZmlndXJhdGlvbi5zZXR0aW5ncy5zZXQoWyd2ZXJzaW9uUmVwb3J0aW5nJ10sIHZlcnNpb25SZXBvcnRpbmcpO1xuXG4gIHJldHVybiBuZXcgQXBwU3RhY2tzKHtcbiAgICBjb25maWd1cmF0aW9uLFxuICAgIGF3czogbmV3IFNESygpLFxuICAgIHN5bnRoZXNpemVyOiBhc3luYyAoKSA9PiB0ZXN0QXNzZW1ibHkoe1xuICAgICAgc3RhY2tzOiBbe1xuICAgICAgICBzdGFja05hbWU6ICd3aXRob3V0ZXJyb3JzJyxcbiAgICAgICAgZW52LFxuICAgICAgICB0ZW1wbGF0ZTogeyByZXNvdXJjZTogJ25vZXJyb3JyZXNvdXJjZScgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YWNrTmFtZTogJ3dpdGhlcnJvcnMnLFxuICAgICAgICBlbnYsXG4gICAgICAgIHRlbXBsYXRlOiB7IHJlc291cmNlOiAnZXJyb3JyZXNvdXJjZScgfSxcbiAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAnL3Jlc291cmNlJzogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0eXBlOiBjeGFwaS5FUlJPUl9NRVRBREFUQV9LRVksXG4gICAgICAgICAgICAgIGRhdGE6ICd0aGlzIGlzIGFuIGVycm9yJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgIH1dXG4gICAgfSksXG4gIH0pO1xufVxuIl19