"use strict";
const aws = require("aws-sdk");
const AWS = require("aws-sdk-mock");
const nodeunit = require("nodeunit");
const ami_1 = require("../../lib/context-providers/ami");
AWS.setSDKInstance(aws);
const mockSDK = {
    defaultAccount: () => Promise.resolve('123456789012'),
    defaultRegion: () => Promise.resolve('bermuda-triangle-1337'),
    cloudFormation: () => { throw new Error('Not Mocked'); },
    ec2: () => Promise.resolve(new aws.EC2()),
    ecr: () => { throw new Error('Not Mocked'); },
    route53: () => { throw new Error('Not Mocked'); },
    s3: () => { throw new Error('Not Mocked'); },
    ssm: () => { throw new Error('Not Mocked'); },
};
module.exports = nodeunit.testCase({
    async 'calls DescribeImages on the request'(test) {
        // GIVEN
        let request;
        AWS.mock('EC2', 'describeImages', (params, cb) => {
            request = params;
            return cb(null, { Images: [{ ImageId: 'ami-1234' }] });
        });
        // WHEN
        await new ami_1.AmiContextProviderPlugin(mockSDK).getValue({
            account: '1234',
            region: 'asdf',
            owners: ['some-owner'],
            filters: {
                'some-filter': ['filtered']
            }
        });
        // THEN
        test.deepEqual(request, {
            Owners: ['some-owner'],
            Filters: [
                {
                    Name: 'some-filter',
                    Values: ['filtered'],
                }
            ]
        });
        AWS.restore();
        test.done();
    },
    async 'returns the most recent AMI matching the criteria'(test) {
        // GIVEN
        AWS.mock('EC2', 'describeImages', (_, cb) => {
            return cb(null, { Images: [
                    {
                        ImageId: 'ami-1234',
                        CreationDate: "2016-06-22T08:39:59.000Z",
                    },
                    {
                        ImageId: 'ami-5678',
                        CreationDate: "2019-06-22T08:39:59.000Z",
                    }
                ] });
        });
        // WHEN
        const result = await new ami_1.AmiContextProviderPlugin(mockSDK).getValue({
            account: '1234',
            region: 'asdf',
            filters: {}
        });
        // THEN
        test.equals(result, 'ami-5678');
        AWS.restore();
        test.done();
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5hbWlzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5hbWlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwrQkFBZ0M7QUFDaEMsb0NBQXFDO0FBQ3JDLHFDQUFzQztBQUV0Qyx5REFBMkU7QUFFM0UsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUV4QixNQUFNLE9BQU8sR0FBUztJQUNwQixjQUFjLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFDckQsYUFBYSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUM7SUFDN0QsY0FBYyxFQUFFLEdBQUcsRUFBRSxHQUFHLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hELEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3pDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QyxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakQsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM5QyxDQUFDO0FBSUYsaUJBQVMsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUN6QixLQUFLLENBQUMscUNBQXFDLENBQUMsSUFBbUI7UUFDN0QsUUFBUTtRQUNSLElBQUksT0FBc0MsQ0FBQztRQUMzQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLE1BQXFDLEVBQUUsRUFBNkMsRUFBRSxFQUFFO1lBQ3pILE9BQU8sR0FBRyxNQUFNLENBQUM7WUFDakIsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxJQUFJLDhCQUF3QixDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUNuRCxPQUFPLEVBQUUsTUFBTTtZQUNmLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFLENBQUMsWUFBWSxDQUFDO1lBQ3RCLE9BQU8sRUFBRTtnQkFDUCxhQUFhLEVBQUUsQ0FBQyxVQUFVLENBQUM7YUFDNUI7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFRLEVBQUU7WUFDdkIsTUFBTSxFQUFFLENBQUMsWUFBWSxDQUFDO1lBQ3RCLE9BQU8sRUFBRTtnQkFDUDtvQkFDRSxJQUFJLEVBQUUsYUFBYTtvQkFDbkIsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDO2lCQUNyQjthQUNGO1NBQytCLENBQUMsQ0FBQztRQUVwQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBQ0QsS0FBSyxDQUFDLG1EQUFtRCxDQUFDLElBQW1CO1FBQzNFLFFBQVE7UUFDUixHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQWdDLEVBQUUsRUFBNkMsRUFBRSxFQUFFO1lBQ3BILE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRTtvQkFDeEI7d0JBQ0UsT0FBTyxFQUFFLFVBQVU7d0JBQ25CLFlBQVksRUFBRSwwQkFBMEI7cUJBQ3pDO29CQUNEO3dCQUNFLE9BQU8sRUFBRSxVQUFVO3dCQUNuQixZQUFZLEVBQUUsMEJBQTBCO3FCQUN6QztpQkFDRixFQUFDLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSw4QkFBd0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFDbEUsT0FBTyxFQUFFLE1BQU07WUFDZixNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU8sRUFBRSxFQUFFO1NBQ1osQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRWhDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXdzID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuaW1wb3J0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGstbW9jaycpO1xuaW1wb3J0IG5vZGV1bml0ID0gcmVxdWlyZSgnbm9kZXVuaXQnKTtcbmltcG9ydCB7IElTREsgfSBmcm9tICcuLi8uLi9saWIvYXBpJztcbmltcG9ydCB7IEFtaUNvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4uLy4uL2xpYi9jb250ZXh0LXByb3ZpZGVycy9hbWknO1xuXG5BV1Muc2V0U0RLSW5zdGFuY2UoYXdzKTtcblxuY29uc3QgbW9ja1NESzogSVNESyA9IHtcbiAgZGVmYXVsdEFjY291bnQ6ICgpID0+IFByb21pc2UucmVzb2x2ZSgnMTIzNDU2Nzg5MDEyJyksXG4gIGRlZmF1bHRSZWdpb246ICgpID0+IFByb21pc2UucmVzb2x2ZSgnYmVybXVkYS10cmlhbmdsZS0xMzM3JyksXG4gIGNsb3VkRm9ybWF0aW9uOiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignTm90IE1vY2tlZCcpOyB9LFxuICBlYzI6ICgpID0+IFByb21pc2UucmVzb2x2ZShuZXcgYXdzLkVDMigpKSxcbiAgZWNyOiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignTm90IE1vY2tlZCcpOyB9LFxuICByb3V0ZTUzOiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignTm90IE1vY2tlZCcpOyB9LFxuICBzMzogKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ05vdCBNb2NrZWQnKTsgfSxcbiAgc3NtOiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignTm90IE1vY2tlZCcpOyB9LFxufTtcblxudHlwZSBBd3NDYWxsYmFjazxUPiA9IChlcnI6IEVycm9yIHwgbnVsbCwgdmFsOiBUKSA9PiB2b2lkO1xuXG5leHBvcnQgPSBub2RldW5pdC50ZXN0Q2FzZSh7XG4gIGFzeW5jICdjYWxscyBEZXNjcmliZUltYWdlcyBvbiB0aGUgcmVxdWVzdCcodGVzdDogbm9kZXVuaXQuVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgbGV0IHJlcXVlc3Q6IGF3cy5FQzIuRGVzY3JpYmVJbWFnZXNSZXF1ZXN0O1xuICAgIEFXUy5tb2NrKCdFQzInLCAnZGVzY3JpYmVJbWFnZXMnLCAocGFyYW1zOiBhd3MuRUMyLkRlc2NyaWJlSW1hZ2VzUmVxdWVzdCwgY2I6IEF3c0NhbGxiYWNrPGF3cy5FQzIuRGVzY3JpYmVJbWFnZXNSZXN1bHQ+KSA9PiB7XG4gICAgICByZXF1ZXN0ID0gcGFyYW1zO1xuICAgICAgcmV0dXJuIGNiKG51bGwsIHsgSW1hZ2VzOiBbeyBJbWFnZUlkOiAnYW1pLTEyMzQnIH1dIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGF3YWl0IG5ldyBBbWlDb250ZXh0UHJvdmlkZXJQbHVnaW4obW9ja1NESykuZ2V0VmFsdWUoe1xuICAgICAgYWNjb3VudDogJzEyMzQnLFxuICAgICAgcmVnaW9uOiAnYXNkZicsXG4gICAgICBvd25lcnM6IFsnc29tZS1vd25lciddLFxuICAgICAgZmlsdGVyczoge1xuICAgICAgICAnc29tZS1maWx0ZXInOiBbJ2ZpbHRlcmVkJ11cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0LmRlZXBFcXVhbChyZXF1ZXN0ISwge1xuICAgICAgT3duZXJzOiBbJ3NvbWUtb3duZXInXSxcbiAgICAgIEZpbHRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIE5hbWU6ICdzb21lLWZpbHRlcicsXG4gICAgICAgICAgVmFsdWVzOiBbJ2ZpbHRlcmVkJ10sXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9IGFzIGF3cy5FQzIuRGVzY3JpYmVJbWFnZXNSZXF1ZXN0KTtcblxuICAgIEFXUy5yZXN0b3JlKCk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG4gIGFzeW5jICdyZXR1cm5zIHRoZSBtb3N0IHJlY2VudCBBTUkgbWF0Y2hpbmcgdGhlIGNyaXRlcmlhJyh0ZXN0OiBub2RldW5pdC5UZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBBV1MubW9jaygnRUMyJywgJ2Rlc2NyaWJlSW1hZ2VzJywgKF86IGF3cy5FQzIuRGVzY3JpYmVJbWFnZXNSZXF1ZXN0LCBjYjogQXdzQ2FsbGJhY2s8YXdzLkVDMi5EZXNjcmliZUltYWdlc1Jlc3VsdD4pID0+IHtcbiAgICAgIHJldHVybiBjYihudWxsLCB7IEltYWdlczogW1xuICAgICAgICB7XG4gICAgICAgICAgSW1hZ2VJZDogJ2FtaS0xMjM0JyxcbiAgICAgICAgICBDcmVhdGlvbkRhdGU6IFwiMjAxNi0wNi0yMlQwODozOTo1OS4wMDBaXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBJbWFnZUlkOiAnYW1pLTU2NzgnLFxuICAgICAgICAgIENyZWF0aW9uRGF0ZTogXCIyMDE5LTA2LTIyVDA4OjM5OjU5LjAwMFpcIixcbiAgICAgICAgfVxuICAgICAgXX0pO1xuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG5ldyBBbWlDb250ZXh0UHJvdmlkZXJQbHVnaW4obW9ja1NESykuZ2V0VmFsdWUoe1xuICAgICAgYWNjb3VudDogJzEyMzQnLFxuICAgICAgcmVnaW9uOiAnYXNkZicsXG4gICAgICBmaWx0ZXJzOiB7fVxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZXF1YWxzKHJlc3VsdCwgJ2FtaS01Njc4Jyk7XG5cbiAgICBBV1MucmVzdG9yZSgpO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9XG59KTsiXX0=