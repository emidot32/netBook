"use strict";
const aws = require("aws-sdk");
const AWS = require("aws-sdk-mock");
const nodeunit = require("nodeunit");
const vpcs_1 = require("../../lib/context-providers/vpcs");
AWS.setSDKInstance(aws);
const mockSDK = {
    defaultAccount: () => Promise.resolve('123456789012'),
    defaultRegion: () => Promise.resolve('bermuda-triangle-1337'),
    cloudFormation: () => { throw new Error('Not Mocked'); },
    ec2: () => Promise.resolve(new aws.EC2()),
    ecr: () => { throw new Error('Not Mocked'); },
    route53: () => { throw new Error('Not Mocked'); },
    s3: () => { throw new Error('Not Mocked'); },
    ssm: () => { throw new Error('Not Mocked'); },
};
function mockVpcLookup(test, options) {
    const VpcId = 'vpc-1234567';
    AWS.mock('EC2', 'describeVpcs', (params, cb) => {
        test.deepEqual(params.Filters, [{ Name: 'foo', Values: ['bar'] }]);
        return cb(null, { Vpcs: [{ VpcId }] });
    });
    AWS.mock('EC2', 'describeSubnets', (params, cb) => {
        test.deepEqual(params.Filters, [{ Name: 'vpc-id', Values: [VpcId] }]);
        return cb(null, { Subnets: options.subnets });
    });
    AWS.mock('EC2', 'describeRouteTables', (params, cb) => {
        test.deepEqual(params.Filters, [{ Name: 'vpc-id', Values: [VpcId] }]);
        return cb(null, { RouteTables: options.routeTables });
    });
    AWS.mock('EC2', 'describeVpnGateways', (params, cb) => {
        test.deepEqual(params.Filters, [
            { Name: 'attachment.vpc-id', Values: [VpcId] },
            { Name: 'attachment.state', Values: ['attached'] },
            { Name: 'state', Values: ['available'] }
        ]);
        return cb(null, { VpnGateways: options.vpnGateways });
    });
}
module.exports = nodeunit.testCase({
    async 'looks up the requested (symmetric) VPC'(test) {
        mockVpcLookup(test, {
            subnets: [
                { SubnetId: 'sub-123456', AvailabilityZone: 'bermuda-triangle-1337', MapPublicIpOnLaunch: true },
                { SubnetId: 'sub-789012', AvailabilityZone: 'bermuda-triangle-1337', MapPublicIpOnLaunch: false }
            ],
            routeTables: [
                { Associations: [{ SubnetId: 'sub-123456' }], RouteTableId: 'rtb-123456', },
                { Associations: [{ SubnetId: 'sub-789012' }], RouteTableId: 'rtb-789012', }
            ],
            vpnGateways: [{ VpnGatewayId: 'gw-abcdef' }]
        });
        const result = await new vpcs_1.VpcNetworkContextProviderPlugin(mockSDK).getValue({
            filter: { foo: 'bar' },
            returnAsymmetricSubnets: true,
        });
        test.deepEqual(result, {
            availabilityZones: [],
            isolatedSubnetIds: undefined,
            isolatedSubnetNames: undefined,
            isolatedSubnetRouteTableIds: undefined,
            privateSubnetIds: undefined,
            privateSubnetNames: undefined,
            privateSubnetRouteTableIds: undefined,
            publicSubnetIds: undefined,
            publicSubnetNames: undefined,
            publicSubnetRouteTableIds: undefined,
            subnetGroups: [
                {
                    name: 'Public',
                    type: 'Public',
                    subnets: [
                        {
                            subnetId: 'sub-123456',
                            availabilityZone: 'bermuda-triangle-1337',
                            routeTableId: 'rtb-123456',
                        },
                    ],
                },
                {
                    name: 'Private',
                    type: 'Private',
                    subnets: [
                        {
                            subnetId: 'sub-789012',
                            availabilityZone: 'bermuda-triangle-1337',
                            routeTableId: 'rtb-789012',
                        },
                    ],
                },
            ],
            vpcId: 'vpc-1234567',
            vpnGatewayId: 'gw-abcdef'
        });
        AWS.restore();
        test.done();
    },
    async 'throws when no such VPC is found'(test) {
        AWS.mock('EC2', 'describeVpcs', (params, cb) => {
            test.deepEqual(params.Filters, [{ Name: 'foo', Values: ['bar'] }]);
            return cb(null, {});
        });
        try {
            await new vpcs_1.VpcNetworkContextProviderPlugin(mockSDK).getValue({
                filter: { foo: 'bar' },
                returnAsymmetricSubnets: true,
            });
            throw Error('The expected exception was not raised!');
        }
        catch (e) {
            test.throws(() => { throw e; }, /Could not find any VPCs matching/);
        }
        AWS.restore();
        test.done();
    },
    async 'throws when multiple VPCs are found'(test) {
        // GIVEN
        AWS.mock('EC2', 'describeVpcs', (params, cb) => {
            test.deepEqual(params.Filters, [{ Name: 'foo', Values: ['bar'] }]);
            return cb(null, { Vpcs: [{ VpcId: 'vpc-1' }, { VpcId: 'vpc-2' }] });
        });
        // WHEN
        try {
            await new vpcs_1.VpcNetworkContextProviderPlugin(mockSDK).getValue({
                filter: { foo: 'bar' },
                returnAsymmetricSubnets: true,
            });
            throw Error('The expected exception was not raised!');
        }
        catch (e) {
            test.throws(() => { throw e; }, /Found 2 VPCs matching/);
        }
        AWS.restore();
        test.done();
    },
    async 'uses the VPC main route table when a subnet has no specific association'(test) {
        mockVpcLookup(test, {
            subnets: [
                { SubnetId: 'sub-123456', AvailabilityZone: 'bermuda-triangle-1337', MapPublicIpOnLaunch: true },
                { SubnetId: 'sub-789012', AvailabilityZone: 'bermuda-triangle-1337', MapPublicIpOnLaunch: false }
            ],
            routeTables: [
                { Associations: [{ SubnetId: 'sub-123456' }], RouteTableId: 'rtb-123456', },
                { Associations: [{ Main: true }], RouteTableId: 'rtb-789012', }
            ],
            vpnGateways: [{ VpnGatewayId: 'gw-abcdef' }]
        });
        const result = await new vpcs_1.VpcNetworkContextProviderPlugin(mockSDK).getValue({
            filter: { foo: 'bar' },
            returnAsymmetricSubnets: true,
        });
        test.deepEqual(result, {
            availabilityZones: [],
            isolatedSubnetIds: undefined,
            isolatedSubnetNames: undefined,
            isolatedSubnetRouteTableIds: undefined,
            privateSubnetIds: undefined,
            privateSubnetNames: undefined,
            privateSubnetRouteTableIds: undefined,
            publicSubnetIds: undefined,
            publicSubnetNames: undefined,
            publicSubnetRouteTableIds: undefined,
            subnetGroups: [
                {
                    name: 'Public',
                    type: 'Public',
                    subnets: [
                        {
                            subnetId: 'sub-123456',
                            availabilityZone: 'bermuda-triangle-1337',
                            routeTableId: 'rtb-123456',
                        },
                    ],
                },
                {
                    name: 'Private',
                    type: 'Private',
                    subnets: [
                        {
                            subnetId: 'sub-789012',
                            availabilityZone: 'bermuda-triangle-1337',
                            routeTableId: 'rtb-789012',
                        },
                    ],
                },
            ],
            vpcId: 'vpc-1234567',
            vpnGatewayId: 'gw-abcdef'
        });
        test.done();
        AWS.restore();
    },
    async 'Recognize public subnet by route table'(test) {
        // GIVEN
        mockVpcLookup(test, {
            subnets: [
                { SubnetId: 'sub-123456', AvailabilityZone: 'bermuda-triangle-1337', MapPublicIpOnLaunch: false },
            ],
            routeTables: [
                {
                    Associations: [{ SubnetId: 'sub-123456' }],
                    RouteTableId: 'rtb-123456',
                    Routes: [
                        {
                            DestinationCidrBlock: "10.0.2.0/26",
                            Origin: "CreateRoute",
                            State: "active",
                            VpcPeeringConnectionId: "pcx-xxxxxx"
                        },
                        {
                            DestinationCidrBlock: "10.0.1.0/24",
                            GatewayId: "local",
                            Origin: "CreateRouteTable",
                            State: "active"
                        },
                        {
                            DestinationCidrBlock: "0.0.0.0/0",
                            GatewayId: "igw-xxxxxx",
                            Origin: "CreateRoute",
                            State: "active"
                        }
                    ],
                },
            ],
        });
        // WHEN
        const result = await new vpcs_1.VpcNetworkContextProviderPlugin(mockSDK).getValue({
            filter: { foo: 'bar' },
            returnAsymmetricSubnets: true,
        });
        // THEN
        test.deepEqual(result, {
            availabilityZones: [],
            isolatedSubnetIds: undefined,
            isolatedSubnetNames: undefined,
            isolatedSubnetRouteTableIds: undefined,
            privateSubnetIds: undefined,
            privateSubnetNames: undefined,
            privateSubnetRouteTableIds: undefined,
            publicSubnetIds: undefined,
            publicSubnetNames: undefined,
            publicSubnetRouteTableIds: undefined,
            subnetGroups: [
                {
                    name: 'Public',
                    type: 'Public',
                    subnets: [
                        {
                            subnetId: 'sub-123456',
                            availabilityZone: 'bermuda-triangle-1337',
                            routeTableId: 'rtb-123456',
                        },
                    ],
                },
            ],
            vpcId: 'vpc-1234567',
            vpnGatewayId: undefined,
        });
        AWS.restore();
        test.done();
    },
    async 'works for asymmetric subnets (not spanning the same Availability Zones)'(test) {
        // GIVEN
        mockVpcLookup(test, {
            subnets: [
                { SubnetId: 'pri-sub-in-1b', AvailabilityZone: 'us-west-1b', MapPublicIpOnLaunch: false },
                { SubnetId: 'pub-sub-in-1c', AvailabilityZone: 'us-west-1c', MapPublicIpOnLaunch: true },
                { SubnetId: 'pub-sub-in-1b', AvailabilityZone: 'us-west-1b', MapPublicIpOnLaunch: true },
                { SubnetId: 'pub-sub-in-1a', AvailabilityZone: 'us-west-1a', MapPublicIpOnLaunch: true },
            ],
            routeTables: [
                { Associations: [{ Main: true }], RouteTableId: 'rtb-123' },
            ],
        });
        // WHEN
        const result = await new vpcs_1.VpcNetworkContextProviderPlugin(mockSDK).getValue({
            filter: { foo: 'bar' },
            returnAsymmetricSubnets: true,
        });
        // THEN
        test.deepEqual(result, {
            availabilityZones: [],
            isolatedSubnetIds: undefined,
            isolatedSubnetNames: undefined,
            isolatedSubnetRouteTableIds: undefined,
            privateSubnetIds: undefined,
            privateSubnetNames: undefined,
            privateSubnetRouteTableIds: undefined,
            publicSubnetIds: undefined,
            publicSubnetNames: undefined,
            publicSubnetRouteTableIds: undefined,
            subnetGroups: [
                {
                    name: 'Private',
                    type: 'Private',
                    subnets: [
                        {
                            subnetId: 'pri-sub-in-1b',
                            availabilityZone: 'us-west-1b',
                            routeTableId: 'rtb-123',
                        },
                    ],
                },
                {
                    name: 'Public',
                    type: 'Public',
                    subnets: [
                        {
                            subnetId: 'pub-sub-in-1a',
                            availabilityZone: 'us-west-1a',
                            routeTableId: 'rtb-123',
                        },
                        {
                            subnetId: 'pub-sub-in-1b',
                            availabilityZone: 'us-west-1b',
                            routeTableId: 'rtb-123',
                        },
                        {
                            subnetId: 'pub-sub-in-1c',
                            availabilityZone: 'us-west-1c',
                            routeTableId: 'rtb-123',
                        },
                    ],
                },
            ],
            vpcId: 'vpc-1234567',
            vpnGatewayId: undefined,
        });
        AWS.restore();
        test.done();
    },
    async 'allows specifying the subnet group name tag'(test) {
        // GIVEN
        mockVpcLookup(test, {
            subnets: [
                {
                    SubnetId: 'pri-sub-in-1b', AvailabilityZone: 'us-west-1b', MapPublicIpOnLaunch: false, Tags: [
                        { Key: 'Tier', Value: 'restricted' },
                    ]
                },
                {
                    SubnetId: 'pub-sub-in-1c', AvailabilityZone: 'us-west-1c', MapPublicIpOnLaunch: true, Tags: [
                        { Key: 'Tier', Value: 'connectivity' },
                    ]
                },
                {
                    SubnetId: 'pub-sub-in-1b', AvailabilityZone: 'us-west-1b', MapPublicIpOnLaunch: true, Tags: [
                        { Key: 'Tier', Value: 'connectivity' },
                    ]
                },
                {
                    SubnetId: 'pub-sub-in-1a', AvailabilityZone: 'us-west-1a', MapPublicIpOnLaunch: true, Tags: [
                        { Key: 'Tier', Value: 'connectivity' },
                    ]
                },
            ],
            routeTables: [
                { Associations: [{ Main: true }], RouteTableId: 'rtb-123' },
            ],
        });
        const result = await new vpcs_1.VpcNetworkContextProviderPlugin(mockSDK).getValue({
            filter: { foo: 'bar' },
            returnAsymmetricSubnets: true,
            subnetGroupNameTag: 'Tier',
        });
        test.deepEqual(result, {
            availabilityZones: [],
            isolatedSubnetIds: undefined,
            isolatedSubnetNames: undefined,
            isolatedSubnetRouteTableIds: undefined,
            privateSubnetIds: undefined,
            privateSubnetNames: undefined,
            privateSubnetRouteTableIds: undefined,
            publicSubnetIds: undefined,
            publicSubnetNames: undefined,
            publicSubnetRouteTableIds: undefined,
            subnetGroups: [
                {
                    name: 'restricted',
                    type: 'Private',
                    subnets: [
                        {
                            subnetId: 'pri-sub-in-1b',
                            availabilityZone: 'us-west-1b',
                            routeTableId: 'rtb-123',
                        },
                    ],
                },
                {
                    name: 'connectivity',
                    type: 'Public',
                    subnets: [
                        {
                            subnetId: 'pub-sub-in-1a',
                            availabilityZone: 'us-west-1a',
                            routeTableId: 'rtb-123',
                        },
                        {
                            subnetId: 'pub-sub-in-1b',
                            availabilityZone: 'us-west-1b',
                            routeTableId: 'rtb-123',
                        },
                        {
                            subnetId: 'pub-sub-in-1c',
                            availabilityZone: 'us-west-1c',
                            routeTableId: 'rtb-123',
                        },
                    ],
                },
            ],
            vpcId: 'vpc-1234567',
            vpnGatewayId: undefined,
        });
        AWS.restore();
        test.done();
    },
});
//# sourceMappingURL=data:application/json;base64,