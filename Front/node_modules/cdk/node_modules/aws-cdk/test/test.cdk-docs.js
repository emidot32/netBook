"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mockery = require("mockery");
const nodeunit_1 = require("nodeunit");
const argv = {
    browser: 'echo %u',
    commandHandler: undefined,
};
module.exports = nodeunit_1.testCase({
    '`cdk docs`': {
        'setUp'(cb) {
            mockery.registerMock('../../lib/logging', {
                debug() { return; },
                error() { return; },
                print() { return; },
                warning() { return; }
            });
            mockery.enable({ useCleanCache: true, warnOnReplace: true, warnOnUnregistered: false });
            cb();
        },
        'tearDown'(cb) {
            mockery.disable();
            mockery.deregisterAll();
            cb();
        },
        async 'exits with 0 when everything is OK'(test) {
            try {
                require('../lib/commands/docs').handler(argv);
                const result = await argv.commandHandler({
                    args: argv
                });
                test.equal(result, 0, 'exit status was 0');
            }
            catch (e) {
                test.doesNotThrow(() => { throw e; });
            }
            finally {
                test.done();
            }
        },
        async 'exits with 0 when opening the browser fails'(test) {
            mockery.registerMock('child_process', {
                exec(_, cb) {
                    cb(new Error('TEST'));
                }
            });
            try {
                require('../lib/commands/docs').handler(argv);
                const result = await argv.commandHandler({
                    args: argv
                });
                test.equal(result, 0, 'exit status was 0');
            }
            catch (e) {
                test.doesNotThrow(() => { throw e; });
            }
            finally {
                test.done();
            }
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5jZGstZG9jcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QuY2RrLWRvY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBb0M7QUFDcEMsdUNBQTZEO0FBRzdELE1BQU0sSUFBSSxHQUFHO0lBQ1gsT0FBTyxFQUFFLFNBQVM7SUFDbEIsY0FBYyxFQUFFLFNBQXlDO0NBQzFELENBQUM7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLG1CQUFRLENBQUM7SUFDeEIsWUFBWSxFQUFFO1FBQ1osT0FBTyxDQUFDLEVBQXFCO1lBQzNCLE9BQU8sQ0FBQyxZQUFZLENBQUMsbUJBQW1CLEVBQUU7Z0JBQ3hDLEtBQUssS0FBSyxPQUFPLENBQUMsQ0FBQztnQkFDbkIsS0FBSyxLQUFLLE9BQU8sQ0FBQyxDQUFDO2dCQUNuQixLQUFLLEtBQUssT0FBTyxDQUFDLENBQUM7Z0JBQ25CLE9BQU8sS0FBSyxPQUFPLENBQUMsQ0FBQzthQUN0QixDQUFDLENBQUM7WUFDSCxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDeEYsRUFBRSxFQUFFLENBQUM7UUFDUCxDQUFDO1FBQ0QsVUFBVSxDQUFDLEVBQXFCO1lBQzlCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNsQixPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDeEIsRUFBRSxFQUFFLENBQUM7UUFDUCxDQUFDO1FBQ0QsS0FBSyxDQUFDLG9DQUFvQyxDQUFDLElBQVU7WUFDbkQsSUFBSTtnQkFDRixPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzlDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLGNBQWUsQ0FBQztvQkFDeEMsSUFBSSxFQUFFLElBQUk7aUJBQ0osQ0FBQyxDQUFDO2dCQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO2FBQzVDO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3ZDO29CQUFTO2dCQUNSLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNiO1FBQ0gsQ0FBQztRQUNELEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxJQUFVO1lBQzVELE9BQU8sQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFO2dCQUNwQyxJQUFJLENBQUMsQ0FBUyxFQUFFLEVBQTBEO29CQUN4RSxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDeEIsQ0FBQzthQUNGLENBQUMsQ0FBQztZQUNILElBQUk7Z0JBQ0YsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM5QyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFlLENBQUM7b0JBQ3hDLElBQUksRUFBRSxJQUFJO2lCQUNKLENBQUMsQ0FBQztnQkFDVixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsbUJBQW1CLENBQUMsQ0FBQzthQUM1QztZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN2QztvQkFBUztnQkFDUixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDYjtRQUNILENBQUM7S0FDRjtDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2NrZXJ5ID0gcmVxdWlyZSgnbW9ja2VyeScpO1xuaW1wb3J0IHsgSUNhbGxiYWNrRnVuY3Rpb24sIFRlc3QsIHRlc3RDYXNlIH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuLi9saWIvY29tbWFuZC1hcGknO1xuXG5jb25zdCBhcmd2ID0ge1xuICBicm93c2VyOiAnZWNobyAldScsXG4gIGNvbW1hbmRIYW5kbGVyOiB1bmRlZmluZWQgYXMgKENvbW1hbmRIYW5kbGVyIHwgdW5kZWZpbmVkKSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdGVzdENhc2Uoe1xuICAnYGNkayBkb2NzYCc6IHtcbiAgICAnc2V0VXAnKGNiOiBJQ2FsbGJhY2tGdW5jdGlvbikge1xuICAgICAgbW9ja2VyeS5yZWdpc3Rlck1vY2soJy4uLy4uL2xpYi9sb2dnaW5nJywge1xuICAgICAgICBkZWJ1ZygpIHsgcmV0dXJuOyB9LFxuICAgICAgICBlcnJvcigpIHsgcmV0dXJuOyB9LFxuICAgICAgICBwcmludCgpIHsgcmV0dXJuOyB9LFxuICAgICAgICB3YXJuaW5nKCkgeyByZXR1cm47IH1cbiAgICAgIH0pO1xuICAgICAgbW9ja2VyeS5lbmFibGUoeyB1c2VDbGVhbkNhY2hlOiB0cnVlLCB3YXJuT25SZXBsYWNlOiB0cnVlLCB3YXJuT25VbnJlZ2lzdGVyZWQ6IGZhbHNlIH0pO1xuICAgICAgY2IoKTtcbiAgICB9LFxuICAgICd0ZWFyRG93bicoY2I6IElDYWxsYmFja0Z1bmN0aW9uKSB7XG4gICAgICBtb2NrZXJ5LmRpc2FibGUoKTtcbiAgICAgIG1vY2tlcnkuZGVyZWdpc3RlckFsbCgpO1xuICAgICAgY2IoKTtcbiAgICB9LFxuICAgIGFzeW5jICdleGl0cyB3aXRoIDAgd2hlbiBldmVyeXRoaW5nIGlzIE9LJyh0ZXN0OiBUZXN0KSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1aXJlKCcuLi9saWIvY29tbWFuZHMvZG9jcycpLmhhbmRsZXIoYXJndik7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFyZ3YuY29tbWFuZEhhbmRsZXIhKHtcbiAgICAgICAgICBhcmdzOiBhcmd2XG4gICAgICAgIH0gYXMgYW55KTtcbiAgICAgICAgdGVzdC5lcXVhbChyZXN1bHQsIDAsICdleGl0IHN0YXR1cyB3YXMgMCcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0ZXN0LmRvZXNOb3RUaHJvdygoKSA9PiB7IHRocm93IGU7IH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGVzdC5kb25lKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyAnZXhpdHMgd2l0aCAwIHdoZW4gb3BlbmluZyB0aGUgYnJvd3NlciBmYWlscycodGVzdDogVGVzdCkge1xuICAgICAgbW9ja2VyeS5yZWdpc3Rlck1vY2soJ2NoaWxkX3Byb2Nlc3MnLCB7XG4gICAgICAgIGV4ZWMoXzogc3RyaW5nLCBjYjogKGVycjogRXJyb3IsIHN0ZG91dD86IHN0cmluZywgc3RkZXJyPzogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgICAgICAgY2IobmV3IEVycm9yKCdURVNUJykpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVpcmUoJy4uL2xpYi9jb21tYW5kcy9kb2NzJykuaGFuZGxlcihhcmd2KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXJndi5jb21tYW5kSGFuZGxlciEoe1xuICAgICAgICAgIGFyZ3M6IGFyZ3ZcbiAgICAgICAgfSBhcyBhbnkpO1xuICAgICAgICB0ZXN0LmVxdWFsKHJlc3VsdCwgMCwgJ2V4aXQgc3RhdHVzIHdhcyAwJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRlc3QuZG9lc05vdFRocm93KCgpID0+IHsgdGhyb3cgZTsgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0ZXN0LmRvbmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuIl19