"use strict";
const nodeunit = require("nodeunit");
const stacks_1 = require("../lib/api/cxapp/stacks");
const sdk_1 = require("../lib/api/util/sdk");
const cdk_toolkit_1 = require("../lib/cdk-toolkit");
class MockStack {
    constructor(stackName, template = { Resources: { TempalteName: stackName } }, templateFile = `fake/stack/${stackName}.json`, assets = [], parameters = {}, environment = { name: 'MockEnv', account: '123456789012', region: 'bermuda-triangle-1' }) {
        this.stackName = stackName;
        this.template = template;
        this.templateFile = templateFile;
        this.assets = assets;
        this.parameters = parameters;
        this.environment = environment;
    }
}
class TestAppStacks extends stacks_1.AppStacks {
    constructor(test) {
        super(undefined);
        this.test = test;
    }
    getTagsFromStackMetadata(stack) {
        switch (stack.stackName) {
            case TestAppStacks.MOCK_STACK_A.stackName:
                return [{ Key: 'Foo', Value: 'Bar' }];
            case TestAppStacks.MOCK_STACK_B.stackName:
                return [{ Key: 'Baz', Value: 'Zinga!' }];
            default:
                throw new Error(`Not an expected mock stack: ${stack.stackName}`);
        }
    }
    selectStacks(selectors) {
        this.test.deepEqual(selectors, ['Test-Stack-A', 'Test-Stack-B']);
        return Promise.resolve([
            // Cheating the type system here (intentionally, so we have to stub less!)
            TestAppStacks.MOCK_STACK_A,
            TestAppStacks.MOCK_STACK_B,
        ]);
    }
    processMetadata(stacks) {
        stacks.forEach(stack => this.test.ok(stack === TestAppStacks.MOCK_STACK_A || stack === TestAppStacks.MOCK_STACK_B, `Not an expected mock stack: ${stack.stackName}`));
    }
    listStacks() {
        throw new Error('Not Implemented');
    }
    synthesizeStack() {
        throw new Error('Not Implemented');
    }
    synthesizeStacks() {
        throw new Error('Not Implemented');
    }
}
TestAppStacks.MOCK_STACK_A = new MockStack('Test-Stack-A');
TestAppStacks.MOCK_STACK_B = new MockStack('Test-Stack-B');
class TestProvisioner {
    constructor(test, expectedTags = {}, expectedNotificationArns) {
        this.test = test;
        this.expectedTags = {};
        for (const [stackName, tags] of Object.entries(expectedTags)) {
            this.expectedTags[stackName] =
                Object.entries(tags).map(([Key, Value]) => ({ Key, Value }))
                    .sort((l, r) => l.Key.localeCompare(r.Key));
        }
        if (expectedNotificationArns) {
            this.expectedNotificationArns = expectedNotificationArns;
        }
    }
    deployStack(options) {
        this.test.ok(options.stack.stackName === TestAppStacks.MOCK_STACK_A.stackName || options.stack.stackName === TestAppStacks.MOCK_STACK_B.stackName, `Not an expected mock stack: ${options.stack.stackName}`);
        this.test.deepEqual(options.tags, this.expectedTags[options.stack.stackName]);
        this.test.deepEqual(options.notificationArns, this.expectedNotificationArns);
        return Promise.resolve({
            stackArn: `arn:aws:cloudformation:::stack/${options.stack.stackName}/MockedOut`,
            noOp: false,
            outputs: { StackName: options.stack.stackName },
        });
    }
    readCurrentTemplate(stack) {
        switch (stack.stackName) {
            case TestAppStacks.MOCK_STACK_A.stackName:
                return Promise.resolve({});
            case TestAppStacks.MOCK_STACK_B.stackName:
                return Promise.resolve({});
            default:
                return Promise.reject(`Not an expected mock stack: ${stack.stackName}`);
        }
    }
}
module.exports = nodeunit.testCase({
    deploy: {
        'makes correct CloudFormation calls': {
            'without options'(test) {
                // GIVEN
                const toolkit = new cdk_toolkit_1.CdkToolkit({
                    appStacks: new TestAppStacks(test),
                    provisioner: new TestProvisioner(test, {
                        'Test-Stack-A': { Foo: 'Bar' },
                        'Test-Stack-B': { Baz: 'Zinga!' },
                    }),
                });
                // WHEN
                toolkit.deploy({ stackNames: ['Test-Stack-A', 'Test-Stack-B'], sdk: new sdk_1.SDK() });
                // THEN
                test.done();
            },
            'with sns notification arns'(test) {
                // GIVEN
                const notificationArns = ['arn:aws:sns:::cfn-notifications', 'arn:aws:sns:::my-cool-topic'];
                const toolkit = new cdk_toolkit_1.CdkToolkit({
                    appStacks: new TestAppStacks(test),
                    provisioner: new TestProvisioner(test, {
                        'Test-Stack-A': { Foo: 'Bar' },
                        'Test-Stack-B': { Baz: 'Zinga!' },
                    }, notificationArns),
                });
                // WHEN
                toolkit.deploy({
                    stackNames: ['Test-Stack-A', 'Test-Stack-B'],
                    notificationArns,
                    sdk: new sdk_1.SDK()
                });
                // THEN
                test.done();
            },
        },
    },
});
//# sourceMappingURL=data:application/json;base64,