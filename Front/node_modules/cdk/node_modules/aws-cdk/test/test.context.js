"use strict";
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const settings_1 = require("../lib/settings");
const state = {};
module.exports = {
    async "setUp"(callback) {
        state.previousWorkingDir = process.cwd();
        state.tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'aws-cdk-test'));
        // tslint:disable-next-line:no-console
        console.log('Temporary working directory:', state.tempDir);
        process.chdir(state.tempDir);
        callback();
    },
    async "tearDown"(callback) {
        // tslint:disable-next-line:no-console
        console.log('Switching back to', state.previousWorkingDir, 'cleaning up', state.tempDir);
        process.chdir(state.previousWorkingDir);
        await fs.remove(state.tempDir);
        callback();
    },
    async 'load context from both files if available'(test) {
        // GIVEN
        await fs.writeJSON('cdk.context.json', { foo: 'bar' });
        await fs.writeJSON('cdk.json', { context: { boo: 'far' } });
        // WHEN
        const config = await new settings_1.Configuration().load();
        // THEN
        test.equal(config.context.get('foo'), 'bar');
        test.equal(config.context.get('boo'), 'far');
        test.done();
    },
    async 'context with colons gets migrated to new file'(test) {
        // GIVEN
        await fs.writeJSON('cdk.context.json', { foo: 'bar' });
        await fs.writeJSON('cdk.json', { context: { 'boo': 'far', 'boo:boo': 'far:far' } });
        const config = await new settings_1.Configuration().load();
        // WHEN
        config.context.set('baz', 'quux');
        await config.saveContext();
        // THEN
        test.deepEqual(await fs.readJSON('cdk.context.json'), { 'foo': 'bar', 'boo:boo': 'far:far', 'baz': 'quux' });
        test.deepEqual(await fs.readJSON('cdk.json'), { context: { boo: 'far' } });
        test.done();
    },
    async 'deleted context disappears from new file'(test) {
        // GIVEN
        await fs.writeJSON('cdk.context.json', { foo: 'bar' });
        await fs.writeJSON('cdk.json', { context: { foo: 'bar' } });
        const config = await new settings_1.Configuration().load();
        // WHEN
        config.context.unset('foo');
        await config.saveContext();
        // THEN
        test.deepEqual(await fs.readJSON('cdk.context.json'), {});
        test.deepEqual(await fs.readJSON('cdk.json'), { context: { foo: 'bar' } });
        test.done();
    },
    async 'clear deletes from new file'(test) {
        // GIVEN
        await fs.writeJSON('cdk.context.json', { foo: 'bar' });
        await fs.writeJSON('cdk.json', { context: { boo: 'far' } });
        const config = await new settings_1.Configuration().load();
        // WHEN
        config.context.clear();
        await config.saveContext();
        // THEN
        test.deepEqual(await fs.readJSON('cdk.context.json'), {});
        test.deepEqual(await fs.readJSON('cdk.json'), { context: { boo: 'far' } });
        test.done();
    },
    async 'surive missing new file'(test) {
        // GIVEN
        await fs.writeJSON('cdk.json', { context: { 'boo:boo': 'far' } });
        const config = await new settings_1.Configuration().load();
        // WHEN
        test.deepEqual(config.context.all, { 'boo:boo': 'far' });
        await config.saveContext();
        // THEN
        test.deepEqual(await fs.readJSON('cdk.context.json'), { 'boo:boo': 'far' });
        test.deepEqual(await fs.readJSON('cdk.json'), {});
        test.done();
    },
    async 'surive no context in old file'(test) {
        // GIVEN
        await fs.writeJSON('cdk.json', {});
        await fs.writeJSON('cdk.context.json', { boo: 'far' });
        const config = await new settings_1.Configuration().load();
        // WHEN
        test.deepEqual(config.context.all, { boo: 'far' });
        await config.saveContext();
        // THEN
        test.deepEqual(await fs.readJSON('cdk.context.json'), { boo: 'far' });
        test.done();
    },
    async 'command line context is merged with stored context'(test) {
        // GIVEN
        await fs.writeJSON('cdk.context.json', { boo: 'far' });
        const config = await new settings_1.Configuration({ context: ['foo=bar'] }).load();
        // WHEN
        test.deepEqual(config.context.all, { foo: 'bar', boo: 'far' });
        test.done();
    },
    async 'can save and load'(test) {
        // GIVEN
        const config1 = await new settings_1.Configuration().load();
        config1.context.set('some_key', 'some_value');
        await config1.saveContext();
        test.equal(config1.context.get('some_key'), 'some_value');
        // WHEN
        const config2 = await new settings_1.Configuration().load();
        // THEN
        test.equal(config2.context.get('some_key'), 'some_value');
        test.done();
    },
    async 'transient values arent saved to disk'(test) {
        // GIVEN
        const config1 = await new settings_1.Configuration().load();
        config1.context.set('some_key', { [settings_1.TRANSIENT_CONTEXT_KEY]: true, value: 'some_value' });
        await config1.saveContext();
        test.equal(config1.context.get('some_key').value, 'some_value');
        // WHEN
        const config2 = await new settings_1.Configuration().load();
        // THEN
        test.equal(config2.context.get('some_key'), undefined);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5jb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwrQkFBZ0M7QUFFaEMseUJBQTBCO0FBQzFCLDZCQUE4QjtBQUM5Qiw4Q0FBdUU7QUFFdkUsTUFBTSxLQUFLLEdBR1AsRUFBRSxDQUFDO0FBRVAsaUJBQVM7SUFDUCxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQW9CO1FBQ2hDLEtBQUssQ0FBQyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDekMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUN6RSxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0IsUUFBUSxFQUFFLENBQUM7SUFDYixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxRQUFvQjtRQUNuQyxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6RixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxrQkFBbUIsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBUSxDQUFDLENBQUM7UUFFaEMsUUFBUSxFQUFFLENBQUM7SUFDYixDQUFDO0lBRUQsS0FBSyxDQUFDLDJDQUEyQyxDQUFDLElBQVU7UUFDMUQsUUFBUTtRQUNSLE1BQU0sRUFBRSxDQUFD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QUFDO1FBQ2pELE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsZ0NBQXFCLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDeEYsTUFBTSxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFaEUsT0FBTztRQUNQLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSx3QkFBYSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFakQsT0FBTztRQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFdkQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCB7IENvbmZpZ3VyYXRpb24sIFRSQU5TSUVOVF9DT05URVhUX0tFWSB9IGZyb20gJy4uL2xpYi9zZXR0aW5ncyc7XG5cbmNvbnN0IHN0YXRlOiB7XG4gIHByZXZpb3VzV29ya2luZ0Rpcj86IHN0cmluZztcbiAgdGVtcERpcj86IHN0cmluZztcbn0gPSB7fTtcblxuZXhwb3J0ID0ge1xuICBhc3luYyBcInNldFVwXCIoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICBzdGF0ZS5wcmV2aW91c1dvcmtpbmdEaXIgPSBwcm9jZXNzLmN3ZCgpO1xuICAgIHN0YXRlLnRlbXBEaXIgPSBhd2FpdCBmcy5ta2R0ZW1wKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ2F3cy1jZGstdGVzdCcpKTtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKCdUZW1wb3Jhcnkgd29ya2luZyBkaXJlY3Rvcnk6Jywgc3RhdGUudGVtcERpcik7XG4gICAgcHJvY2Vzcy5jaGRpcihzdGF0ZS50ZW1wRGlyKTtcbiAgICBjYWxsYmFjaygpO1xuICB9LFxuXG4gIGFzeW5jIFwidGVhckRvd25cIihjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coJ1N3aXRjaGluZyBiYWNrIHRvJywgc3RhdGUucHJldmlvdXNXb3JraW5nRGlyLCAnY2xlYW5pbmcgdXAnLCBzdGF0ZS50ZW1wRGlyKTtcbiAgICBwcm9jZXNzLmNoZGlyKHN0YXRlLnByZXZpb3VzV29ya2luZ0RpciEpO1xuICAgIGF3YWl0IGZzLnJlbW92ZShzdGF0ZS50ZW1wRGlyISk7XG5cbiAgICBjYWxsYmFjaygpO1xuICB9LFxuXG4gIGFzeW5jICdsb2FkIGNvbnRleHQgZnJvbSBib3RoIGZpbGVzIGlmIGF2YWlsYWJsZScodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgYXdhaXQgZnMud3JpdGVKU09OKCdjZGsuY29udGV4dC5qc29uJywgeyBmb286ICdiYXInIH0pO1xuICAgIGF3YWl0IGZzLndyaXRlSlNPTignY2RrLmpzb24nLCB7IGNvbnRleHQ6IHsgYm9vOiAnZmFyJyB9IH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGNvbmZpZyA9IGF3YWl0IG5ldyBDb25maWd1cmF0aW9uKCkubG9hZCgpO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZXF1YWwoY29uZmlnLmNvbnRleHQuZ2V0KCdmb28nKSwgJ2JhcicpO1xuICAgIHRlc3QuZXF1YWwoY29uZmlnLmNvbnRleHQuZ2V0KCdib28nKSwgJ2ZhcicpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ2NvbnRleHQgd2l0aCBjb2xvbnMgZ2V0cyBtaWdyYXRlZCB0byBuZXcgZmlsZScodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgYXdhaXQgZnMud3JpdGVKU09OKCdjZGsuY29udGV4dC5qc29uJywgeyBmb286ICdiYXInIH0pO1xuICAgIGF3YWl0IGZzLndyaXRlSlNPTignY2RrLmpzb24nLCB7IGNvbnRleHQ6IHsgJ2Jvbyc6ICdmYXInLCAnYm9vOmJvbyc6ICdmYXI6ZmFyJyB9IH0pO1xuICAgIGNvbnN0IGNvbmZpZyA9IGF3YWl0IG5ldyBDb25maWd1cmF0aW9uKCkubG9hZCgpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbmZpZy5jb250ZXh0LnNldCgnYmF6JywgJ3F1dXgnKTtcbiAgICBhd2FpdCBjb25maWcuc2F2ZUNvbnRleHQoKTtcblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0LmRlZXBFcXVhbChhd2FpdCBmcy5yZWFkSlNPTignY2RrLmNvbnRleHQuanNvbicpLCB7ICdmb28nOiAnYmFyJywgJ2Jvbzpib28nOiAnZmFyOmZhcicsICdiYXonOiAncXV1eCcgfSk7XG4gICAgdGVzdC5kZWVwRXF1YWwoYXdhaXQgZnMucmVhZEpTT04oJ2Nkay5qc29uJyksIHsgY29udGV4dDogeyBib286ICdmYXInfSB9KTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gIGFzeW5jICdkZWxldGVkIGNvbnRleHQgZGlzYXBwZWFycyBmcm9tIG5ldyBmaWxlJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBhd2FpdCBmcy53cml0ZUpTT04oJ2Nkay5jb250ZXh0Lmpzb24nLCB7IGZvbzogJ2JhcicgfSk7XG4gICAgYXdhaXQgZnMud3JpdGVKU09OKCdjZGsuanNvbicsIHsgY29udGV4dDogeyBmb286ICdiYXInIH0gfSk7XG4gICAgY29uc3QgY29uZmlnID0gYXdhaXQgbmV3IENvbmZpZ3VyYXRpb24oKS5sb2FkKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uZmlnLmNvbnRleHQudW5zZXQoJ2ZvbycpO1xuICAgIGF3YWl0IGNvbmZpZy5zYXZlQ29udGV4dCgpO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZGVlcEVxdWFsKGF3YWl0IGZzLnJlYWRKU09OKCdjZGsuY29udGV4dC5qc29uJyksIHt9KTtcbiAgICB0ZXN0LmRlZXBFcXVhbChhd2FpdCBmcy5yZWFkSlNPTignY2RrLmpzb24nKSwgeyBjb250ZXh0OiB7IGZvbzogJ2JhcicgfX0pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ2NsZWFyIGRlbGV0ZXMgZnJvbSBuZXcgZmlsZScodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgYXdhaXQgZnMud3JpdGVKU09OKCdjZGsuY29udGV4dC5qc29uJywgeyBmb286ICdiYXInIH0pO1xuICAgIGF3YWl0IGZzLndyaXRlSlNPTignY2RrLmpzb24nLCB7IGNvbnRleHQ6IHsgYm9vOiAnZmFyJyB9IH0pO1xuICAgIGNvbnN0IGNvbmZpZyA9IGF3YWl0IG5ldyBDb25maWd1cmF0aW9uKCkubG9hZCgpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbmZpZy5jb250ZXh0LmNsZWFyKCk7XG4gICAgYXdhaXQgY29uZmlnLnNhdmVDb250ZXh0KCk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5kZWVwRXF1YWwoYXdhaXQgZnMucmVhZEpTT04oJ2Nkay5jb250ZXh0Lmpzb24nKSwge30pO1xuICAgIHRlc3QuZGVlcEVxdWFsKGF3YWl0IGZzLnJlYWRKU09OKCdjZGsuanNvbicpLCB7IGNvbnRleHQ6IHsgYm9vOiAnZmFyJyB9IH0pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ3N1cml2ZSBtaXNzaW5nIG5ldyBmaWxlJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBhd2FpdCBmcy53cml0ZUpTT04oJ2Nkay5qc29uJywgeyBjb250ZXh0OiB7ICdib286Ym9vJyA6ICdmYXInIH0gfSk7XG4gICAgY29uc3QgY29uZmlnID0gYXdhaXQgbmV3IENvbmZpZ3VyYXRpb24oKS5sb2FkKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgdGVzdC5kZWVwRXF1YWwoY29uZmlnLmNvbnRleHQuYWxsLCB7ICdib286Ym9vJyA6ICdmYXInIH0pO1xuICAgIGF3YWl0IGNvbmZpZy5zYXZlQ29udGV4dCgpO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZGVlcEVxdWFsKGF3YWl0IGZzLnJlYWRKU09OKCdjZGsuY29udGV4dC5qc29uJyksIHsgJ2Jvbzpib28nIDogJ2ZhcicgfSk7XG4gICAgdGVzdC5kZWVwRXF1YWwoYXdhaXQgZnMucmVhZEpTT04oJ2Nkay5qc29uJyksIHt9KTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gIGFzeW5jICdzdXJpdmUgbm8gY29udGV4dCBpbiBvbGQgZmlsZScodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgYXdhaXQgZnMud3JpdGVKU09OKCdjZGsuanNvbicsIHsgfSk7XG4gICAgYXdhaXQgZnMud3JpdGVKU09OKCdjZGsuY29udGV4dC5qc29uJywgeyBib286ICdmYXInIH0pO1xuICAgIGNvbnN0IGNvbmZpZyA9IGF3YWl0IG5ldyBDb25maWd1cmF0aW9uKCkubG9hZCgpO1xuXG4gICAgLy8gV0hFTlxuICAgIHRlc3QuZGVlcEVxdWFsKGNvbmZpZy5jb250ZXh0LmFsbCwgeyBib286ICdmYXInIH0pO1xuICAgIGF3YWl0IGNvbmZpZy5zYXZlQ29udGV4dCgpO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZGVlcEVxdWFsKGF3YWl0IGZzLnJlYWRKU09OKCdjZGsuY29udGV4dC5qc29uJyksIHsgYm9vOiAnZmFyJyB9KTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gIGFzeW5jICdjb21tYW5kIGxpbmUgY29udGV4dCBpcyBtZXJnZWQgd2l0aCBzdG9yZWQgY29udGV4dCcodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgYXdhaXQgZnMud3JpdGVKU09OKCdjZGsuY29udGV4dC5qc29uJywgeyBib286ICdmYXInIH0pO1xuICAgIGNvbnN0IGNvbmZpZyA9IGF3YWl0IG5ldyBDb25maWd1cmF0aW9uKHsgY29udGV4dDogWydmb289YmFyJ10gfSBhcyBhbnkpLmxvYWQoKTtcblxuICAgIC8vIFdIRU5cbiAgICB0ZXN0LmRlZXBFcXVhbChjb25maWcuY29udGV4dC5hbGwsIHsgZm9vOiAnYmFyJywgYm9vOiAnZmFyJyB9KTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gIGFzeW5jICdjYW4gc2F2ZSBhbmQgbG9hZCcodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgY29uZmlnMSA9IGF3YWl0IG5ldyBDb25maWd1cmF0aW9uKCkubG9hZCgpO1xuICAgIGNvbmZpZzEuY29udGV4dC5zZXQoJ3NvbWVfa2V5JywgJ3NvbWVfdmFsdWUnKTtcbiAgICBhd2FpdCBjb25maWcxLnNhdmVDb250ZXh0KCk7XG4gICAgdGVzdC5lcXVhbChjb25maWcxLmNvbnRleHQuZ2V0KCdzb21lX2tleScpLCAnc29tZV92YWx1ZScpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGNvbmZpZzIgPSBhd2FpdCBuZXcgQ29uZmlndXJhdGlvbigpLmxvYWQoKTtcblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0LmVxdWFsKGNvbmZpZzIuY29udGV4dC5nZXQoJ3NvbWVfa2V5JyksICdzb21lX3ZhbHVlJyk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICBhc3luYyAndHJhbnNpZW50IHZhbHVlcyBhcmVudCBzYXZlZCB0byBkaXNrJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBjb25maWcxID0gYXdhaXQgbmV3IENvbmZpZ3VyYXRpb24oKS5sb2FkKCk7XG4gICAgY29uZmlnMS5jb250ZXh0LnNldCgnc29tZV9rZXknLCB7IFtUUkFOU0lFTlRfQ09OVEVYVF9LRVldOiB0cnVlLCB2YWx1ZTogJ3NvbWVfdmFsdWUnIH0pO1xuICAgIGF3YWl0IGNvbmZpZzEuc2F2ZUNvbnRleHQoKTtcbiAgICB0ZXN0LmVxdWFsKGNvbmZpZzEuY29udGV4dC5nZXQoJ3NvbWVfa2V5JykudmFsdWUsICdzb21lX3ZhbHVlJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgY29uZmlnMiA9IGF3YWl0IG5ldyBDb25maWd1cmF0aW9uKCkubG9hZCgpO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZXF1YWwoY29uZmlnMi5jb250ZXh0LmdldCgnc29tZV9rZXknKSwgdW5kZWZpbmVkKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxufTsiXX0=