"use strict";
const settings_1 = require("../lib/settings");
module.exports = {
    'can delete values from Context object'(test) {
        // GIVEN
        const settings1 = new settings_1.Settings({ foo: 'bar' });
        const settings2 = new settings_1.Settings({ boo: 'baz' });
        const context = new settings_1.Context(settings1, settings2);
        // WHEN
        context.unset('foo');
        // THEN
        test.deepEqual(context.all, { boo: 'baz' });
        test.deepEqual(settings1.all, {});
        test.deepEqual(settings2.all, { boo: 'baz' });
        test.done();
    },
    'can set values in Context object'(test) {
        // GIVEN
        const settings1 = new settings_1.Settings();
        const settings2 = new settings_1.Settings();
        const context = new settings_1.Context(settings1, settings2);
        // WHEN
        context.set('foo', 'bar');
        // THEN
        test.deepEqual(context.all, { foo: 'bar' });
        test.deepEqual(settings1.all, { foo: 'bar' });
        test.deepEqual(settings2.all, {});
        test.done();
    },
    'can set values in Context object if first is immutable'(test) {
        // GIVEN
        const settings1 = new settings_1.Settings();
        const settings2 = new settings_1.Settings();
        const context = new settings_1.Context(settings1.makeReadOnly(), settings2);
        // WHEN
        context.set('foo', 'bar');
        // THEN
        test.deepEqual(context.all, { foo: 'bar' });
        test.deepEqual(settings1.all, {});
        test.deepEqual(settings2.all, { foo: 'bar' });
        test.done();
    },
    'can clear all values in all objects'(test) {
        // GIVEN
        const settings1 = new settings_1.Settings({ foo: 'bar' });
        const settings2 = new settings_1.Settings({ foo: 'snar', boo: 'gar' });
        const context = new settings_1.Context(settings1, settings2);
        // WHEN
        context.clear();
        // THEN
        test.deepEqual(context.all, {});
        test.deepEqual(settings1.all, {});
        test.deepEqual(settings2.all, {});
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3Quc2V0dGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLDhDQUFvRDtBQUVwRCxpQkFBUztJQUNQLHVDQUF1QyxDQUFDLElBQVU7UUFDaEQsUUFBUTtRQUNSLE1BQU0sU0FBUyxHQUFHLElBQUksbUJBQVEsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sU0FBUyxHQUFHLElBQUksbUJBQVEsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sT0FBTyxHQUFHLElBQUksa0JBQU8sQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbEQsT0FBTztRQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFckIsT0FBTztRQUNQLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUU5QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsa0NBQWtDLENBQUMsSUFBVTtRQUMzQyxRQUFRO1FBQ1IsTUFBTSxTQUFTLEdBQUcsSUFBSSxtQkFBUSxFQUFFLENBQUM7UUFDakMsTUFBTSxTQUFTLEdBQUcsSUFBSSxtQkFBUSxFQUFFLENBQUM7UUFDakMsTUFBTSxPQUFPLEdBQUcsSUFBSSxrQkFBTyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVsRCxPQUFPO1FBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFMUIsT0FBTztRQUNQLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVsQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsd0RBQXdELENBQUMsSUFBVTtRQUNqRSxRQUFRO1FBQ1IsTUFBTSxTQUFTLEdBQUcsSUFBSSxtQkFBUSxFQUFFLENBQUM7UUFDakMsTUFBTSxTQUFTLEdBQUcsSUFBSSxtQkFBUSxFQUFFLENBQUM7UUFDakMsTUFBTSxPQUFPLEdBQUcsSUFBSSxrQkFBTyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVqRSxPQUFPO1FBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFMUIsT0FBTztRQUNQLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFHLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUU5QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQscUNBQXFDLENBQUMsSUFBVTtRQUM5QyxRQUFRO1FBQ1IsTUFBTSxTQUFTLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDL0MsTUFBTSxTQUFTLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM1RCxNQUFNLE9BQU8sR0FBRyxJQUFJLGtCQUFPLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRWxELE9BQU87UUFDUCxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFaEIsT0FBTztRQUNQLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBRyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWxDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IENvbnRleHQsIFNldHRpbmdzIH0gZnJvbSAnLi4vbGliL3NldHRpbmdzJztcblxuZXhwb3J0ID0ge1xuICAnY2FuIGRlbGV0ZSB2YWx1ZXMgZnJvbSBDb250ZXh0IG9iamVjdCcodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc2V0dGluZ3MxID0gbmV3IFNldHRpbmdzKHsgZm9vOiAnYmFyJyB9KTtcbiAgICBjb25zdCBzZXR0aW5nczIgPSBuZXcgU2V0dGluZ3MoeyBib286ICdiYXonIH0pO1xuICAgIGNvbnN0IGNvbnRleHQgPSBuZXcgQ29udGV4dChzZXR0aW5nczEsIHNldHRpbmdzMik7XG5cbiAgICAvLyBXSEVOXG4gICAgY29udGV4dC51bnNldCgnZm9vJyk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5kZWVwRXF1YWwoY29udGV4dC5hbGwsIHsgYm9vOiAnYmF6JyB9KTtcbiAgICB0ZXN0LmRlZXBFcXVhbChzZXR0aW5nczEuYWxsLCB7fSk7XG4gICAgdGVzdC5kZWVwRXF1YWwoc2V0dGluZ3MyLmFsbCwgeyBib286ICdiYXonIH0pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2NhbiBzZXQgdmFsdWVzIGluIENvbnRleHQgb2JqZWN0Jyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzZXR0aW5nczEgPSBuZXcgU2V0dGluZ3MoKTtcbiAgICBjb25zdCBzZXR0aW5nczIgPSBuZXcgU2V0dGluZ3MoKTtcbiAgICBjb25zdCBjb250ZXh0ID0gbmV3IENvbnRleHQoc2V0dGluZ3MxLCBzZXR0aW5nczIpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnRleHQuc2V0KCdmb28nLCAnYmFyJyk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5kZWVwRXF1YWwoY29udGV4dC5hbGwsIHsgZm9vOiAnYmFyJyB9KTtcbiAgICB0ZXN0LmRlZXBFcXVhbChzZXR0aW5nczEuYWxsLCB7IGZvbzogJ2JhcicgfSk7XG4gICAgdGVzdC5kZWVwRXF1YWwoc2V0dGluZ3MyLmFsbCwge30pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2NhbiBzZXQgdmFsdWVzIGluIENvbnRleHQgb2JqZWN0IGlmIGZpcnN0IGlzIGltbXV0YWJsZScodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc2V0dGluZ3MxID0gbmV3IFNldHRpbmdzKCk7XG4gICAgY29uc3Qgc2V0dGluZ3MyID0gbmV3IFNldHRpbmdzKCk7XG4gICAgY29uc3QgY29udGV4dCA9IG5ldyBDb250ZXh0KHNldHRpbmdzMS5tYWtlUmVhZE9ubHkoKSwgc2V0dGluZ3MyKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb250ZXh0LnNldCgnZm9vJywgJ2JhcicpO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZGVlcEVxdWFsKGNvbnRleHQuYWxsLCB7IGZvbzogJ2JhcicgfSk7XG4gICAgdGVzdC5kZWVwRXF1YWwoc2V0dGluZ3MxLmFsbCwgeyB9KTtcbiAgICB0ZXN0LmRlZXBFcXVhbChzZXR0aW5nczIuYWxsLCB7IGZvbzogJ2JhcicgfSk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnY2FuIGNsZWFyIGFsbCB2YWx1ZXMgaW4gYWxsIG9iamVjdHMnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHNldHRpbmdzMSA9IG5ldyBTZXR0aW5ncyh7IGZvbzogJ2JhcicgfSk7XG4gICAgY29uc3Qgc2V0dGluZ3MyID0gbmV3IFNldHRpbmdzKHsgZm9vOiAnc25hcicsIGJvbzogJ2dhcicgfSk7XG4gICAgY29uc3QgY29udGV4dCA9IG5ldyBDb250ZXh0KHNldHRpbmdzMSwgc2V0dGluZ3MyKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb250ZXh0LmNsZWFyKCk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5kZWVwRXF1YWwoY29udGV4dC5hbGwsIHt9KTtcbiAgICB0ZXN0LmRlZXBFcXVhbChzZXR0aW5nczEuYWxsLCB7IH0pO1xuICAgIHRlc3QuZGVlcEVxdWFsKHNldHRpbmdzMi5hbGwsIHt9KTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxufTsiXX0=