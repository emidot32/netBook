"use strict";
const colors = require("colors/safe");
const console_formatters_1 = require("../../lib/util/console-formatters");
function reportBanners(actual, expected) {
    return 'Assertion failed.\n' +
        'Expected banner: \n' + expected.join('\n') + '\n' +
        'Actual banner: \n' + actual.join('\n');
}
module.exports = {
    'no banner on empty msg list'(test) {
        test.strictEqual(console_formatters_1.formatAsBanner([]).length, 0);
        test.done();
    },
    'banner works as expected'(test) {
        const msgs = ['msg1', 'msg2'];
        const expected = [
            '************',
            '*** msg1 ***',
            '*** msg2 ***',
            '************'
        ];
        const actual = console_formatters_1.formatAsBanner(msgs);
        test.strictEqual(console_formatters_1.formatAsBanner(msgs).length, expected.length, reportBanners(actual, expected));
        for (let i = 0; i < expected.length; i++) {
            test.strictEqual(actual[i], expected[i], reportBanners(actual, expected));
        }
        test.done();
    },
    'banner works for formatted msgs'(test) {
        const msgs = [
            'hello msg1',
            colors.yellow('hello msg2'),
            colors.bold('hello msg3'),
        ];
        const expected = [
            '******************',
            '*** hello msg1 ***',
            `*** ${colors.yellow('hello msg2')} ***`,
            `*** ${colors.bold('hello msg3')} ***`,
            '******************',
        ];
        const actual = console_formatters_1.formatAsBanner(msgs);
        test.strictEqual(console_formatters_1.formatAsBanner(msgs).length, expected.length, reportBanners(actual, expected));
        for (let i = 0; i < expected.length; i++) {
            test.strictEqual(actual[i], expected[i], reportBanners(actual, expected));
        }
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5jb25zb2xlLWZvcm1hdHRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LmNvbnNvbGUtZm9ybWF0dGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0NBQXVDO0FBRXZDLDBFQUFtRTtBQUVuRSxTQUFTLGFBQWEsQ0FBQyxNQUFnQixFQUFFLFFBQWtCO0lBQ3pELE9BQU8scUJBQXFCO1FBQzFCLHFCQUFxQixHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSTtRQUNsRCxtQkFBbUIsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFFRCxpQkFBUztJQUNQLDZCQUE2QixDQUFDLElBQVU7UUFDdEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxtQ0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsMEJBQTBCLENBQUMsSUFBVTtRQUNuQyxNQUFNLElBQUksR0FBRyxDQUFFLE1BQU0sRUFBRSxNQUFNLENBQUUsQ0FBQztRQUNoQyxNQUFNLFFBQVEsR0FBRztZQUNmLGNBQWM7WUFDZCxjQUFjO1lBQ2QsY0FBYztZQUNkLGNBQWM7U0FDZixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsbUNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVwQyxJQUFJLENBQUMsV0FBVyxDQUFDLG1DQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2hHLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7U0FDM0U7UUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsaUNBQWlDLENBQUMsSUFBVTtRQUMxQyxNQUFNLElBQUksR0FBRztZQUNYLFlBQVk7WUFDWixNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztZQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztTQUMxQixDQUFDO1FBQ0YsTUFBTSxRQUFRLEdBQUc7WUFDZixvQkFBb0I7WUFDcEIsb0JBQW9CO1lBQ3BCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTTtZQUN4QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU07WUFDdEMsb0JBQW9CO1NBQ3JCLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxtQ0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBDLElBQUksQ0FBQyxXQUFXLENBQUMsbUNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDaEcsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUMzRTtRQUVELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyA9IHJlcXVpcmUoJ2NvbG9ycy9zYWZlJyk7XG5pbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IHsgZm9ybWF0QXNCYW5uZXIgfSBmcm9tICcuLi8uLi9saWIvdXRpbC9jb25zb2xlLWZvcm1hdHRlcnMnO1xuXG5mdW5jdGlvbiByZXBvcnRCYW5uZXJzKGFjdHVhbDogc3RyaW5nW10sIGV4cGVjdGVkOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gIHJldHVybiAnQXNzZXJ0aW9uIGZhaWxlZC5cXG4nICtcbiAgICAnRXhwZWN0ZWQgYmFubmVyOiBcXG4nICsgZXhwZWN0ZWQuam9pbignXFxuJykgKyAnXFxuJyArXG4gICAgJ0FjdHVhbCBiYW5uZXI6IFxcbicgKyBhY3R1YWwuam9pbignXFxuJyk7XG59XG5cbmV4cG9ydCA9IHtcbiAgJ25vIGJhbm5lciBvbiBlbXB0eSBtc2cgbGlzdCcodGVzdDogVGVzdCkge1xuICAgIHRlc3Quc3RyaWN0RXF1YWwoZm9ybWF0QXNCYW5uZXIoW10pLmxlbmd0aCwgMCk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2Jhbm5lciB3b3JrcyBhcyBleHBlY3RlZCcodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IG1zZ3MgPSBbICdtc2cxJywgJ21zZzInIF07XG4gICAgY29uc3QgZXhwZWN0ZWQgPSBbXG4gICAgICAnKioqKioqKioqKioqJyxcbiAgICAgICcqKiogbXNnMSAqKionLFxuICAgICAgJyoqKiBtc2cyICoqKicsXG4gICAgICAnKioqKioqKioqKioqJ1xuICAgIF07XG5cbiAgICBjb25zdCBhY3R1YWwgPSBmb3JtYXRBc0Jhbm5lcihtc2dzKTtcblxuICAgIHRlc3Quc3RyaWN0RXF1YWwoZm9ybWF0QXNCYW5uZXIobXNncykubGVuZ3RoLCBleHBlY3RlZC5sZW5ndGgsIHJlcG9ydEJhbm5lcnMoYWN0dWFsLCBleHBlY3RlZCkpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXhwZWN0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRlc3Quc3RyaWN0RXF1YWwoYWN0dWFsW2ldLCBleHBlY3RlZFtpXSwgcmVwb3J0QmFubmVycyhhY3R1YWwsIGV4cGVjdGVkKSk7XG4gICAgfVxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdiYW5uZXIgd29ya3MgZm9yIGZvcm1hdHRlZCBtc2dzJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3QgbXNncyA9IFtcbiAgICAgICdoZWxsbyBtc2cxJyxcbiAgICAgIGNvbG9ycy55ZWxsb3coJ2hlbGxvIG1zZzInKSxcbiAgICAgIGNvbG9ycy5ib2xkKCdoZWxsbyBtc2czJyksXG4gICAgXTtcbiAgICBjb25zdCBleHBlY3RlZCA9IFtcbiAgICAgICcqKioqKioqKioqKioqKioqKionLFxuICAgICAgJyoqKiBoZWxsbyBtc2cxICoqKicsXG4gICAgICBgKioqICR7Y29sb3JzLnllbGxvdygnaGVsbG8gbXNnMicpfSAqKipgLFxuICAgICAgYCoqKiAke2NvbG9ycy5ib2xkKCdoZWxsbyBtc2czJyl9ICoqKmAsXG4gICAgICAnKioqKioqKioqKioqKioqKioqJyxcbiAgICBdO1xuXG4gICAgY29uc3QgYWN0dWFsID0gZm9ybWF0QXNCYW5uZXIobXNncyk7XG5cbiAgICB0ZXN0LnN0cmljdEVxdWFsKGZvcm1hdEFzQmFubmVyKG1zZ3MpLmxlbmd0aCwgZXhwZWN0ZWQubGVuZ3RoLCByZXBvcnRCYW5uZXJzKGFjdHVhbCwgZXhwZWN0ZWQpKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4cGVjdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0ZXN0LnN0cmljdEVxdWFsKGFjdHVhbFtpXSwgZXhwZWN0ZWRbaV0sIHJlcG9ydEJhbm5lcnMoYWN0dWFsLCBleHBlY3RlZCkpO1xuICAgIH1cblxuICAgIHRlc3QuZG9uZSgpO1xuICB9XG59OyJdfQ==