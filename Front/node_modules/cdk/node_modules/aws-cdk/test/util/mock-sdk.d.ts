import AWS = require('aws-sdk');
import { SDK } from "../../lib/api/util/sdk";
/**
 * An SDK that allows replacing (some of) the clients
 *
 * Its the responsibility of the consumer to replace all calls that
 * actually will be called.
 */
export declare class MockSDK extends SDK {
    private readonly sandbox;
    constructor();
    /**
     * Replace the CloudFormation client with the given object
     */
    stubCloudFormation(stubs: SyncHandlerSubsetOf<AWS.CloudFormation>): void;
    /**
     * Replace the ECR client with the given object
     */
    stubEcr(stubs: SyncHandlerSubsetOf<AWS.ECR>): void;
}
declare type AwsCallInputOutput<T> = T extends {
    (args: infer INPUT, callback?: ((err: AWS.AWSError, data: any) => void) | undefined): AWS.Request<infer OUTPUT, AWS.AWSError>;
    (callback?: ((err: AWS.AWSError, data: {}) => void) | undefined): AWS.Request<any, any>;
} ? [INPUT, OUTPUT] : never;
declare type MockHandlerType<AI extends [any, any]> = (input: AI[0]) => AI[1];
declare type SyncHandlerSubsetOf<S> = {
    [K in keyof S]?: MockHandlerType<AwsCallInputOutput<S[K]>>;
};
export {};
