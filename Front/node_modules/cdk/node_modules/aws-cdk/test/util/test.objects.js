"use strict";
const util_1 = require("../../lib/util");
module.exports = {
    'deepSet can set deeply'(test) {
        const obj = {};
        util_1.deepSet(obj, ['a', 'b'], 3);
        test.deepEqual(obj, { a: { b: 3 } });
        test.done();
    },
    'deepGet can get deeply'(test) {
        const obj = { a: { b: 3 } };
        test.equal(util_1.deepGet(obj, ['a', 'b']), 3);
        test.done();
    },
    'deepGet can return an array'(test) {
        const obj = { a: [1, 2, 3] };
        test.deepEqual(util_1.deepGet(obj, ['a']), [1, 2, 3]);
        test.done();
    },
    'changing deepClones copy leaves the original intact'(test) {
        const original = { a: [{ b: 3 }] };
        const copy = util_1.deepClone(original);
        copy.a[0].c = 5;
        test.deepEqual(original, { a: [{ b: 3 }] });
        test.done();
    },
    'deepMerge merges objects'(test) {
        const original = { a: { b: 3 } };
        util_1.deepMerge(original, { a: { c: 4 } });
        test.deepEqual(original, { a: { b: 3, c: 4 } });
        test.done();
    },
    'deepMerge overwrites non-objects'(test) {
        const original = { a: [] };
        util_1.deepMerge(original, { a: { b: 3 } });
        test.deepEqual(original, { a: { b: 3 } });
        test.done();
    },
    'deepMerge does not overwrite if rightmost is "undefined"'(test) {
        const original = { a: 1 };
        util_1.deepMerge(original, { a: undefined });
        test.deepEqual(original, { a: 1 });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5vYmplY3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5vYmplY3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSx5Q0FBd0U7QUFFeEUsaUJBQVM7SUFDUCx3QkFBd0IsQ0FBQyxJQUFVO1FBQ2pDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNmLGNBQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFDRCx3QkFBd0IsQ0FBQyxJQUFVO1FBQ2pDLE1BQU0sR0FBRyxHQUFHLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxFQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUNELDZCQUE2QixDQUFDLElBQVU7UUFDdEMsTUFBTSxHQUFHLEdBQUcsRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBQ0QscURBQXFELENBQUMsSUFBVTtRQUM5RCxNQUFNLFFBQVEsR0FBRyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQztRQUMvQixNQUFNLElBQUksR0FBRyxnQkFBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVoQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFDRCwwQkFBMEIsQ0FBQyxJQUFVO1FBQ25DLE1BQU0sUUFBUSxHQUFHLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxFQUFDLENBQUM7UUFDN0IsZ0JBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDO1FBRWpDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFDRCxrQ0FBa0MsQ0FBQyxJQUFVO1FBQzNDLE1BQU0sUUFBUSxHQUFHLEVBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBQyxDQUFDO1FBQ3pCLGdCQUFTLENBQUMsUUFBUSxFQUFFLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxFQUFDLENBQUMsQ0FBQztRQUVqQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUNELDBEQUEwRCxDQUFDLElBQVU7UUFDbkUsTUFBTSxRQUFRLEdBQUcsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUM7UUFDeEIsZ0JBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBQyxDQUFDLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQztRQUVwQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IGRlZXBDbG9uZSwgZGVlcEdldCwgZGVlcE1lcmdlLCBkZWVwU2V0IH0gZnJvbSAnLi4vLi4vbGliL3V0aWwnO1xuXG5leHBvcnQgPSB7XG4gICdkZWVwU2V0IGNhbiBzZXQgZGVlcGx5Jyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgb2JqID0ge307XG4gICAgZGVlcFNldChvYmosIFsnYScsICdiJ10sIDMpO1xuICAgIHRlc3QuZGVlcEVxdWFsKG9iaiwge2E6IHtiOiAzfX0pO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuICAnZGVlcEdldCBjYW4gZ2V0IGRlZXBseScodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IG9iaiA9IHthOiB7YjogM319O1xuICAgIHRlc3QuZXF1YWwoZGVlcEdldChvYmosIFsnYScsICdiJ10pLCAzKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcbiAgJ2RlZXBHZXQgY2FuIHJldHVybiBhbiBhcnJheScodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IG9iaiA9IHthOiBbMSwgMiwgM119O1xuICAgIHRlc3QuZGVlcEVxdWFsKGRlZXBHZXQob2JqLCBbJ2EnXSksIFsxLCAyLCAzXSk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG4gICdjaGFuZ2luZyBkZWVwQ2xvbmVzIGNvcHkgbGVhdmVzIHRoZSBvcmlnaW5hbCBpbnRhY3QnKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBvcmlnaW5hbCA9IHthOiBbe2I6IDN9XX07XG4gICAgY29uc3QgY29weSA9IGRlZXBDbG9uZShvcmlnaW5hbCk7XG4gICAgY29weS5hWzBdLmMgPSA1O1xuXG4gICAgdGVzdC5kZWVwRXF1YWwob3JpZ2luYWwsIHthOiBbe2I6IDN9XX0pO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuICAnZGVlcE1lcmdlIG1lcmdlcyBvYmplY3RzJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgb3JpZ2luYWwgPSB7YToge2I6IDN9fTtcbiAgICBkZWVwTWVyZ2Uob3JpZ2luYWwsIHthOiB7YzogNH19KTtcblxuICAgIHRlc3QuZGVlcEVxdWFsKG9yaWdpbmFsLCB7YToge2I6IDMsIGM6IDR9fSk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG4gICdkZWVwTWVyZ2Ugb3ZlcndyaXRlcyBub24tb2JqZWN0cycodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IG9yaWdpbmFsID0ge2E6IFtdfTtcbiAgICBkZWVwTWVyZ2Uob3JpZ2luYWwsIHthOiB7YjogM319KTtcblxuICAgIHRlc3QuZGVlcEVxdWFsKG9yaWdpbmFsLCB7YToge2I6IDN9fSk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG4gICdkZWVwTWVyZ2UgZG9lcyBub3Qgb3ZlcndyaXRlIGlmIHJpZ2h0bW9zdCBpcyBcInVuZGVmaW5lZFwiJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgb3JpZ2luYWwgPSB7YTogMX07XG4gICAgZGVlcE1lcmdlKG9yaWdpbmFsLCB7YTogdW5kZWZpbmVkfSk7XG5cbiAgICB0ZXN0LmRlZXBFcXVhbChvcmlnaW5hbCwge2E6IDF9KTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfVxufTtcbiJdfQ==