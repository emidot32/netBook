"use strict";
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const sinon = require("sinon");
const timers_1 = require("timers");
const util_1 = require("util");
const version_1 = require("../lib/version");
const setTimeout = util_1.promisify(timers_1.setTimeout);
function tmpfile() {
    return `/tmp/version-${Math.floor(Math.random() * 10000)}`;
}
module.exports = {
    'tearDown'(callback) {
        sinon.restore();
        callback();
    },
    'initialization fails on unwritable directory'(test) {
        test.expect(1);
        const cacheFile = tmpfile();
        sinon.stub(fs, 'mkdirsSync').withArgs(path.dirname(cacheFile)).throws('Cannot make directory');
        test.throws(() => new version_1.VersionCheckTTL(cacheFile), /not writable/);
        test.done();
    },
    async 'cache file responds correctly when file is not present'(test) {
        test.expect(1);
        const cache = new version_1.VersionCheckTTL(tmpfile(), 1);
        test.strictEqual(await cache.hasExpired(), true);
        test.done();
    },
    async 'cache file honours the specified TTL'(test) {
        test.expect(2);
        const cache = new version_1.VersionCheckTTL(tmpfile(), 1);
        await cache.update();
        test.strictEqual(await cache.hasExpired(), false);
        await setTimeout(1001); // Just above 1 sec in ms
        test.strictEqual(await cache.hasExpired(), true);
        test.done();
    },
    async 'Skip version check if cache has not expired'(test) {
        test.expect(1);
        const cache = new version_1.VersionCheckTTL(tmpfile(), 100);
        await cache.update();
        test.equal(await version_1.latestVersionIfHigher('0.0.0', cache), null);
        test.done();
    },
    async 'Return later version when exists & skip recent re-check'(test) {
        test.expect(3);
        const cache = new version_1.VersionCheckTTL(tmpfile(), 100);
        const result = await version_1.latestVersionIfHigher('0.0.0', cache);
        test.notEqual(result, null);
        test.ok(result.length > 0);
        const result2 = await version_1.latestVersionIfHigher('0.0.0', cache);
        test.equal(result2, null);
        test.done();
    },
    async 'Return null if version is higher than npm'(test) {
        test.expect(1);
        const cache = new version_1.VersionCheckTTL(tmpfile(), 100);
        const result = await version_1.latestVersionIfHigher('100.100.100', cache);
        test.equal(result, null);
        test.done();
    },
    'No homedir for the given user'(test) {
        test.expect(1);
        sinon.stub(os, 'homedir').returns('');
        sinon.stub(os, 'userInfo').returns({ username: '', uid: 10, gid: 11, shell: null, homedir: '' });
        test.throws(() => new version_1.VersionCheckTTL(), /Cannot determine home directory/);
        test.done();
    },
    async 'Version specified is stored in the TTL file'(test) {
        test.expect(1);
        const cacheFile = tmpfile();
        const cache = new version_1.VersionCheckTTL(cacheFile, 1);
        await cache.update('1.1.1');
        const storedVersion = fs.readFileSync(cacheFile, 'utf8');
        test.equal(storedVersion, '1.1.1');
        test.done();
    },
    async 'No Version specified for storage in the TTL file'(test) {
        test.expect(1);
        const cacheFile = tmpfile();
        const cache = new version_1.VersionCheckTTL(cacheFile, 1);
        await cache.update();
        const storedVersion = fs.readFileSync(cacheFile, 'utf8');
        test.equal(storedVersion, '');
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,