"use strict";
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const init_1 = require("../lib/init");
const state = {};
async function newTempWorkDir() {
    const newDir = await fs.mkdtemp(path.join(os.tmpdir(), 'aws-cdk-test'));
    process.chdir(newDir);
    return newDir;
}
module.exports = {
    async "setUp"(callback) {
        state.previousWorkingDir = process.cwd();
        state.tempDir = await newTempWorkDir();
        // tslint:disable-next-line:no-console
        console.log('Temporary working directory:', state.tempDir);
        callback();
    },
    async "tearDown"(callback) {
        // tslint:disable-next-line:no-console
        console.log('Switching back to', state.previousWorkingDir, 'cleaning up', state.tempDir);
        process.chdir(state.previousWorkingDir);
        await fs.remove(state.tempDir);
        callback();
    },
    async 'create a TypeScript library project'(test) {
        await init_1.cliInit('lib', 'typescript', false);
        // Check that package.json and lib/ got created in the current directory
        test.equal(true, await fs.pathExists('package.json'));
        test.equal(true, await fs.pathExists('lib'));
        test.done();
    },
    async 'create a TypeScript app project'(test) {
        await init_1.cliInit('app', 'typescript', false);
        // Check that package.json and bin/ got created in the current directory
        test.equal(true, await fs.pathExists('package.json'));
        test.equal(true, await fs.pathExists('bin'));
        test.done();
    },
    async 'create a JavaScript app project'(test) {
        await init_1.cliInit('app', 'javascript', false);
        // Check that package.json and bin/ got created in the current directory
        test.equal(true, await fs.pathExists('package.json'));
        test.equal(true, await fs.pathExists('bin'));
        test.done();
    },
    async 'git directory does not throw off the initer!'(test) {
        fs.mkdirSync('.git');
        await init_1.cliInit('app', 'typescript', false);
        // Check that package.json and bin/ got created in the current directory
        test.equal(true, await fs.pathExists('package.json'));
        test.equal(true, await fs.pathExists('bin'));
        test.done();
    },
    async 'verify "future flags" are added to cdk.json'(test) {
        for (const templ of await init_1.availableInitTemplates) {
            for (const lang of templ.languages) {
                const prevdir = process.cwd();
                try {
                    await newTempWorkDir();
                    await init_1.cliInit(templ.name, lang, 
                    /* canUseNetwork */ false, 
                    /* generateOnly */ true);
                    // ok if template doesn't have a cdk.json file (e.g. the "lib" template)
                    if (!await fs.pathExists('cdk.json')) {
                        continue;
                    }
                    const config = await fs.readJson('cdk.json');
                    const context = config.context || {};
                    for (const [key, expected] of Object.entries(cxapi.FUTURE_FLAGS)) {
                        const actual = context[key];
                        test.equal(actual, expected, `expected future flag "${key}=${expected}" in generated cdk.json for ${templ.name}/${lang} but got "${actual}"`);
                    }
                }
                finally {
                    process.chdir(prevdir);
                }
            }
        }
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,