"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mockery = require("mockery");
const nodeunit_1 = require("nodeunit");
module.exports = nodeunit_1.testCase({
    '`cdk doctor`': {
        'setUp'(cb) {
            mockery.registerMock('../../lib/logging', {
                print: () => undefined
            });
            mockery.enable({ useCleanCache: true, warnOnReplace: true, warnOnUnregistered: false });
            cb();
        },
        'tearDown'(cb) {
            mockery.disable();
            mockery.deregisterAll();
            cb();
        },
        async 'exits with 0 when everything is OK'(test) {
            const argv = {};
            try {
                require('../lib/commands/doctor').handler(argv);
                const result = await argv.commandHandler({
                    args: argv
                });
                test.equal(result, 0, 'exit status was 0');
            }
            catch (e) {
                test.doesNotThrow(() => e);
            }
            finally {
                test.done();
            }
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5jZGstZG9jdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5jZGstZG9jdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW9DO0FBQ3BDLHVDQUE2RDtBQUc3RCxNQUFNLENBQUMsT0FBTyxHQUFHLG1CQUFRLENBQUM7SUFDeEIsY0FBYyxFQUFFO1FBQ2QsT0FBTyxDQUFDLEVBQXFCO1lBQzNCLE9BQU8sQ0FBQyxZQUFZLENBQUMsbUJBQW1CLEVBQUU7Z0JBQ3hDLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTO2FBQ3ZCLENBQUMsQ0FBQztZQUNILE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN4RixFQUFFLEVBQUUsQ0FBQztRQUNQLENBQUM7UUFDRCxVQUFVLENBQUMsRUFBcUI7WUFDOUIsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2xCLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN4QixFQUFFLEVBQUUsQ0FBQztRQUNQLENBQUM7UUFDRCxLQUFLLENBQUMsb0NBQW9DLENBQUMsSUFBVTtZQUNuRCxNQUFNLElBQUksR0FBUSxFQUFFLENBQUM7WUFDckIsSUFBSTtnQkFDRixPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2hELE1BQU0sTUFBTSxHQUFHLE1BQU8sSUFBSSxDQUFDLGNBQWlDLENBQUM7b0JBQzNELElBQUksRUFBRSxJQUFJO2lCQUNKLENBQUMsQ0FBQztnQkFDVixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsbUJBQW1CLENBQUMsQ0FBQzthQUM1QztZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDNUI7b0JBQVM7Z0JBQ1IsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2I7UUFDSCxDQUFDO0tBQ0Y7Q0FDRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9ja2VyeSA9IHJlcXVpcmUoJ21vY2tlcnknKTtcbmltcG9ydCB7IElDYWxsYmFja0Z1bmN0aW9uLCBUZXN0LCB0ZXN0Q2FzZSB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi4vbGliL2NvbW1hbmQtYXBpJztcblxubW9kdWxlLmV4cG9ydHMgPSB0ZXN0Q2FzZSh7XG4gICdgY2RrIGRvY3RvcmAnOiB7XG4gICAgJ3NldFVwJyhjYjogSUNhbGxiYWNrRnVuY3Rpb24pIHtcbiAgICAgIG1vY2tlcnkucmVnaXN0ZXJNb2NrKCcuLi8uLi9saWIvbG9nZ2luZycsIHtcbiAgICAgICAgcHJpbnQ6ICgpID0+IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICBtb2NrZXJ5LmVuYWJsZSh7IHVzZUNsZWFuQ2FjaGU6IHRydWUsIHdhcm5PblJlcGxhY2U6IHRydWUsIHdhcm5PblVucmVnaXN0ZXJlZDogZmFsc2UgfSk7XG4gICAgICBjYigpO1xuICAgIH0sXG4gICAgJ3RlYXJEb3duJyhjYjogSUNhbGxiYWNrRnVuY3Rpb24pIHtcbiAgICAgIG1vY2tlcnkuZGlzYWJsZSgpO1xuICAgICAgbW9ja2VyeS5kZXJlZ2lzdGVyQWxsKCk7XG4gICAgICBjYigpO1xuICAgIH0sXG4gICAgYXN5bmMgJ2V4aXRzIHdpdGggMCB3aGVuIGV2ZXJ5dGhpbmcgaXMgT0snKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IGFyZ3Y6IGFueSA9IHt9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWlyZSgnLi4vbGliL2NvbW1hbmRzL2RvY3RvcicpLmhhbmRsZXIoYXJndik7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IChhcmd2LmNvbW1hbmRIYW5kbGVyIGFzIENvbW1hbmRIYW5kbGVyKSh7XG4gICAgICAgICAgYXJnczogYXJndlxuICAgICAgICB9IGFzIGFueSk7XG4gICAgICAgIHRlc3QuZXF1YWwocmVzdWx0LCAwLCAnZXhpdCBzdGF0dXMgd2FzIDAnKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGVzdC5kb2VzTm90VGhyb3coKCkgPT4gZSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0ZXN0LmRvbmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuIl19