"use strict";
const serialize_1 = require("../lib/serialize");
// Preferred quote of the YAML library
const q = '"';
module.exports = {
    'quote the word "ON"'(test) {
        // NON NEGOTIABLE! If not quoted, will be interpreted as the boolean TRUE
        // tslint:disable-next-line:no-console
        const output = serialize_1.toYAML({
            notABoolean: "ON"
        });
        test.equals(output.trim(), `notABoolean: ${q}ON${q}`);
        test.done();
    },
    'quote number-like strings with a leading 0'(test) {
        const output = serialize_1.toYAML({
            leadingZero: "012345"
        });
        test.equals(output.trim(), `leadingZero: ${q}012345${q}`);
        test.done();
    },
    'do not quote octal numbers that arent really octal'(test) {
        // This is a contentious one, and something that might have changed in YAML1.2 vs YAML1.1
        //
        // One could make the argument that a sequence of characters that couldn't ever
        // be an octal value doesn't need to be quoted, and pyyaml parses it correctly.
        //
        // However, CloudFormation's parser interprets it as a decimal number (eating the
        // leading 0) if it's unquoted, so that's the behavior we're testing for.
        const output = serialize_1.toYAML({
            leadingZero: "0123456789"
        });
        test.equals(output.trim(), `leadingZero: ${q}0123456789${q}`);
        test.done();
    },
    'validate that our YAML correctly emits quoted colons in a list'(test) {
        // Must be quoted otherwise it's not valid YAML.
        //
        // 'yaml' fails this.
        const output = serialize_1.toYAML({
            colons: ['arn', ':', 'aws']
        });
        test.equals(output.trim(), [
            'colons:',
            '  - arn',
            `  - ${q}:${q}`,
            '  - aws'
        ].join('\n'));
        test.done();
    },
    'validate emission of very long lines'(test) {
        const template = {
            Field: ' very long line that starts with a space. very long line that starts with a space. start on a new line'
        };
        const output = serialize_1.toYAML(template);
        const parsed = serialize_1.fromYAML(output);
        test.deepEqual(template, parsed);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC55YW1sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC55YW1sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxnREFBb0Q7QUFFcEQsc0NBQXNDO0FBQ3RDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUVkLGlCQUFTO0lBQ1AscUJBQXFCLENBQUMsSUFBVTtRQUM5Qix5RUFBeUU7UUFFekUsc0NBQXNDO1FBQ3RDLE1BQU0sTUFBTSxHQUFHLGtCQUFNLENBQUM7WUFDcEIsV0FBVyxFQUFFLElBQUk7U0FDbEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXRELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCw0Q0FBNEMsQ0FBQyxJQUFVO1FBQ3JELE1BQU0sTUFBTSxHQUFHLGtCQUFNLENBQUM7WUFDcEIsV0FBVyxFQUFFLFFBQVE7U0FDdEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTFELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxvREFBb0QsQ0FBQyxJQUFVO1FBQzdELHlGQUF5RjtRQUN6RixFQUFFO1FBQ0YsK0VBQStFO1FBQy9FLCtFQUErRTtRQUMvRSxFQUFFO1FBQ0YsaUZBQWlGO1FBQ2pGLHlFQUF5RTtRQUV6RSxNQUFNLE1BQU0sR0FBRyxrQkFBTSxDQUFDO1lBQ3BCLFdBQVcsRUFBRSxZQUFZO1NBQzFCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUU5RCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsZ0VBQWdFLENBQUMsSUFBVTtRQUN6RSxnREFBZ0Q7UUFDaEQsRUFBRTtRQUNGLHFCQUFxQjtRQUVyQixNQUFNLE1BQU0sR0FBRyxrQkFBTSxDQUFDO1lBQ3BCLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDO1NBQzVCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3pCLFNBQVM7WUFDVCxTQUFTO1lBQ1QsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2YsU0FBUztTQUNWLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFZCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsc0NBQXNDLENBQUMsSUFBVTtRQUMvQyxNQUFNLFFBQVEsR0FBRztZQUNmLEtBQUssRUFBRSx3R0FBd0c7U0FDaEgsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLGtCQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEMsTUFBTSxNQUFNLEdBQUcsb0JBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVoQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVqQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyBmcm9tWUFNTCwgdG9ZQU1MIH0gZnJvbSAnLi4vbGliL3NlcmlhbGl6ZSc7XG5cbi8vIFByZWZlcnJlZCBxdW90ZSBvZiB0aGUgWUFNTCBsaWJyYXJ5XG5jb25zdCBxID0gJ1wiJztcblxuZXhwb3J0ID0ge1xuICAncXVvdGUgdGhlIHdvcmQgXCJPTlwiJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gTk9OIE5FR09USUFCTEUhIElmIG5vdCBxdW90ZWQsIHdpbGwgYmUgaW50ZXJwcmV0ZWQgYXMgdGhlIGJvb2xlYW4gVFJVRVxuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICBjb25zdCBvdXRwdXQgPSB0b1lBTUwoe1xuICAgICAgbm90QUJvb2xlYW46IFwiT05cIlxuICAgIH0pO1xuXG4gICAgdGVzdC5lcXVhbHMob3V0cHV0LnRyaW0oKSwgYG5vdEFCb29sZWFuOiAke3F9T04ke3F9YCk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAncXVvdGUgbnVtYmVyLWxpa2Ugc3RyaW5ncyB3aXRoIGEgbGVhZGluZyAwJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gdG9ZQU1MKHtcbiAgICAgIGxlYWRpbmdaZXJvOiBcIjAxMjM0NVwiXG4gICAgfSk7XG5cbiAgICB0ZXN0LmVxdWFscyhvdXRwdXQudHJpbSgpLCBgbGVhZGluZ1plcm86ICR7cX0wMTIzNDUke3F9YCk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnZG8gbm90IHF1b3RlIG9jdGFsIG51bWJlcnMgdGhhdCBhcmVudCByZWFsbHkgb2N0YWwnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBUaGlzIGlzIGEgY29udGVudGlvdXMgb25lLCBhbmQgc29tZXRoaW5nIHRoYXQgbWlnaHQgaGF2ZSBjaGFuZ2VkIGluIFlBTUwxLjIgdnMgWUFNTDEuMVxuICAgIC8vXG4gICAgLy8gT25lIGNvdWxkIG1ha2UgdGhlIGFyZ3VtZW50IHRoYXQgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIHRoYXQgY291bGRuJ3QgZXZlclxuICAgIC8vIGJlIGFuIG9jdGFsIHZhbHVlIGRvZXNuJ3QgbmVlZCB0byBiZSBxdW90ZWQsIGFuZCBweXlhbWwgcGFyc2VzIGl0IGNvcnJlY3RseS5cbiAgICAvL1xuICAgIC8vIEhvd2V2ZXIsIENsb3VkRm9ybWF0aW9uJ3MgcGFyc2VyIGludGVycHJldHMgaXQgYXMgYSBkZWNpbWFsIG51bWJlciAoZWF0aW5nIHRoZVxuICAgIC8vIGxlYWRpbmcgMCkgaWYgaXQncyB1bnF1b3RlZCwgc28gdGhhdCdzIHRoZSBiZWhhdmlvciB3ZSdyZSB0ZXN0aW5nIGZvci5cblxuICAgIGNvbnN0IG91dHB1dCA9IHRvWUFNTCh7XG4gICAgICBsZWFkaW5nWmVybzogXCIwMTIzNDU2Nzg5XCJcbiAgICB9KTtcblxuICAgIHRlc3QuZXF1YWxzKG91dHB1dC50cmltKCksIGBsZWFkaW5nWmVybzogJHtxfTAxMjM0NTY3ODkke3F9YCk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAndmFsaWRhdGUgdGhhdCBvdXIgWUFNTCBjb3JyZWN0bHkgZW1pdHMgcXVvdGVkIGNvbG9ucyBpbiBhIGxpc3QnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBNdXN0IGJlIHF1b3RlZCBvdGhlcndpc2UgaXQncyBub3QgdmFsaWQgWUFNTC5cbiAgICAvL1xuICAgIC8vICd5YW1sJyBmYWlscyB0aGlzLlxuXG4gICAgY29uc3Qgb3V0cHV0ID0gdG9ZQU1MKHtcbiAgICAgIGNvbG9uczogWydhcm4nLCAnOicsICdhd3MnXVxuICAgIH0pO1xuXG4gICAgdGVzdC5lcXVhbHMob3V0cHV0LnRyaW0oKSwgW1xuICAgICAgJ2NvbG9uczonLFxuICAgICAgJyAgLSBhcm4nLFxuICAgICAgYCAgLSAke3F9OiR7cX1gLFxuICAgICAgJyAgLSBhd3MnXG4gICAgXS5qb2luKCdcXG4nKSk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAndmFsaWRhdGUgZW1pc3Npb24gb2YgdmVyeSBsb25nIGxpbmVzJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSB7XG4gICAgICBGaWVsZDogJyB2ZXJ5IGxvbmcgbGluZSB0aGF0IHN0YXJ0cyB3aXRoIGEgc3BhY2UuIHZlcnkgbG9uZyBsaW5lIHRoYXQgc3RhcnRzIHdpdGggYSBzcGFjZS4gc3RhcnQgb24gYSBuZXcgbGluZSdcbiAgICB9O1xuXG4gICAgY29uc3Qgb3V0cHV0ID0gdG9ZQU1MKHRlbXBsYXRlKTtcblxuICAgIGNvbnN0IHBhcnNlZCA9IGZyb21ZQU1MKG91dHB1dCk7XG5cbiAgICB0ZXN0LmRlZXBFcXVhbCh0ZW1wbGF0ZSwgcGFyc2VkKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9XG59O1xuIl19