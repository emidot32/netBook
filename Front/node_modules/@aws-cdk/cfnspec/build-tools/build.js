"use strict";
/*
 * Invoked as part of the "build" script of this package,
 * this script takes all specification fragments in the
 * `spec-source` folder and generates a unified specification
 * document at `spec/specification.json`.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fastJsonPatch = require("fast-json-patch");
const fs = require("fs-extra");
const md5 = require("md5");
const path = require("path");
const scrutiny_1 = require("./scrutiny");
async function main() {
    const inputDir = path.join(process.cwd(), 'spec-source');
    const files = await fs.readdir(inputDir);
    const spec = { PropertyTypes: {}, ResourceTypes: {}, Fingerprint: '' };
    for (const file of files.filter(n => n.endsWith('.json')).sort()) {
        const data = await fs.readJson(path.join(inputDir, file));
        if (file.indexOf('patch') === -1) {
            decorateResourceTypes(data);
            forEachSection(spec, data, merge);
        }
        else {
            forEachSection(spec, data, patch);
        }
    }
    scrutiny_1.detectScrutinyTypes(spec);
    spec.Fingerprint = md5(JSON.stringify(normalize(spec)));
    const outDir = path.join(process.cwd(), 'spec');
    await fs.mkdirp(outDir);
    await fs.writeJson(path.join(outDir, 'specification.json'), spec, { spaces: 2 });
}
function forEachSection(spec, data, cb) {
    cb(spec.PropertyTypes, data.PropertyTypes, ['PropertyTypes']);
    cb(spec.ResourceTypes, data.ResourceTypes, ['ResourceTypes']);
    // Per-resource specs are keyed on ResourceType (singular), but we want it in ResourceTypes (plural)
    cb(spec.ResourceTypes, data.ResourceType, ['ResourceType']);
}
function decorateResourceTypes(data) {
    const requiredTransform = data.ResourceSpecificationTransform;
    if (!requiredTransform) {
        return;
    }
    const resourceTypes = data.ResourceTypes || data.ResourceType;
    for (const name of Object.keys(resourceTypes)) {
        resourceTypes[name].RequiredTransform = requiredTransform;
    }
}
function merge(spec, fragment, jsonPath) {
    if (!fragment) {
        return;
    }
    for (const key of Object.keys(fragment)) {
        if (key in spec) {
            const specVal = spec[key];
            const fragVal = fragment[key];
            if (typeof specVal !== typeof fragVal) {
                // tslint:disable-next-line:max-line-length
                throw new Error(`Attempted to merge ${JSON.stringify(fragVal)} into incompatible ${JSON.stringify(specVal)} at path ${jsonPath.join('/')}/${key}`);
            }
            if (typeof specVal !== 'object') {
                // tslint:disable-next-line:max-line-length
                throw new Error(`Conflict when attempting to merge ${JSON.stringify(fragVal)} into ${JSON.stringify(specVal)} at path ${jsonPath.join('/')}/${key}`);
            }
            merge(specVal, fragVal, [...jsonPath, key]);
        }
        else {
            spec[key] = fragment[key];
        }
    }
}
function patch(spec, fragment) {
    if (!fragment) {
        return;
    }
    if ('patch' in fragment) {
        // tslint:disable-next-line:no-console
        console.log(`Applying patch: ${fragment.patch.description}`);
        fastJsonPatch.applyPatch(spec, fragment.patch.operations);
    }
    else {
        for (const key of Object.keys(fragment)) {
            patch(spec[key], fragment[key]);
        }
    }
}
/**
 * Modifies the provided specification so that ``ResourceTypes`` and ``PropertyTypes`` are listed in alphabetical order.
 *
 * @param spec an AWS CloudFormation Resource Specification document.
 *
 * @returns ``spec``, after having sorted the ``ResourceTypes`` and ``PropertyTypes`` sections alphabetically.
 */
function normalize(spec) {
    spec.ResourceTypes = normalizeSection(spec.ResourceTypes);
    if (spec.PropertyTypes) {
        spec.PropertyTypes = normalizeSection(spec.PropertyTypes);
    }
    return spec;
    function normalizeSection(section) {
        const result = {};
        for (const key of Object.keys(section).sort()) {
            result[key] = section[key];
        }
        return result;
    }
}
main()
    .catch(e => {
    // tslint:disable-next-line:no-console
    console.error(e.stack);
    process.exit(-1);
});
//# sourceMappingURL=data:application/json;base64,