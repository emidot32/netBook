"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const property_1 = require("./property");
/**
 * Determine if the resource supports tags
 *
 * This function combined with isTagProperty determines if the `cdk.TagManager`
 * and `cdk.TaggableResource` can process these tags. If not, standard code
 * generation of properties will be used.
 */
function isTaggableResource(spec) {
    if (spec.Properties && spec.Properties.Tags) {
        return property_1.isTagProperty(spec.Properties.Tags);
    }
    return false;
}
exports.isTaggableResource = isTaggableResource;
function isPrimitiveAttribute(spec) {
    return !!spec.PrimitiveType;
}
exports.isPrimitiveAttribute = isPrimitiveAttribute;
function isListAttribute(spec) {
    return spec.Type === 'List';
}
exports.isListAttribute = isListAttribute;
function isPrimitiveListAttribute(spec) {
    return isListAttribute(spec) && !!spec.PrimitiveItemType;
}
exports.isPrimitiveListAttribute = isPrimitiveListAttribute;
function isComplexListAttribute(spec) {
    return isListAttribute(spec) && !!spec.ItemType;
}
exports.isComplexListAttribute = isComplexListAttribute;
/**
 * Type declaration for special values of the "Ref" attribute represents.
 *
 * The attribute can take on more values than these, but these are treated specially.
 */
var SpecialRefKind;
(function (SpecialRefKind) {
    /**
     * No '.ref' member is generated for this type, because it doesn't have a meaningful value.
     */
    SpecialRefKind["None"] = "None";
    /**
     * The generated class will inherit from the built-in 'Arn' type.
     */
    SpecialRefKind["Arn"] = "Arn";
})(SpecialRefKind = exports.SpecialRefKind || (exports.SpecialRefKind = {}));
var ResourceScrutinyType;
(function (ResourceScrutinyType) {
    /**
     * No additional scrutiny
     */
    ResourceScrutinyType["None"] = "None";
    /**
     * An externally attached policy document to a resource
     *
     * (Common for SQS, SNS, S3, ...)
     */
    ResourceScrutinyType["ResourcePolicyResource"] = "ResourcePolicyResource";
    /**
     * This is an IAM policy on an identity resource
     *
     * (Basically saying: this is AWS::IAM::Policy)
     */
    ResourceScrutinyType["IdentityPolicyResource"] = "IdentityPolicyResource";
    /**
     * This is a Lambda Permission policy
     */
    ResourceScrutinyType["LambdaPermission"] = "LambdaPermission";
    /**
     * An ingress rule object
     */
    ResourceScrutinyType["IngressRuleResource"] = "IngressRuleResource";
    /**
     * A set of egress rules
     */
    ResourceScrutinyType["EgressRuleResource"] = "EgressRuleResource";
})(ResourceScrutinyType = exports.ResourceScrutinyType || (exports.ResourceScrutinyType = {}));
function isResourceScrutinyType(str) {
    return ResourceScrutinyType[str] !== undefined;
}
exports.isResourceScrutinyType = isResourceScrutinyType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtdHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlc291cmNlLXR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx5Q0FBa0U7QUFzRGxFOzs7Ozs7R0FNRztBQUNILFNBQWdCLGtCQUFrQixDQUFDLElBQWtCO0lBQ25ELElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRTtRQUMzQyxPQUFPLHdCQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM1QztJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUxELGdEQUtDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsSUFBZTtJQUNsRCxPQUFPLENBQUMsQ0FBRSxJQUEyQixDQUFDLGFBQWEsQ0FBQztBQUN0RCxDQUFDO0FBRkQsb0RBRUM7QUFFRCxTQUFnQixlQUFlLENBQUMsSUFBZTtJQUM3QyxPQUFRLElBQXNCLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQztBQUNqRCxDQUFDO0FBRkQsMENBRUM7QUFFRCxTQUFnQix3QkFBd0IsQ0FBQyxJQUFlO0lBQ3RELE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBRSxJQUErQixDQUFDLGlCQUFpQixDQUFDO0FBQ3ZGLENBQUM7QUFGRCw0REFFQztBQUVELFNBQWdCLHNCQUFzQixDQUFDLElBQWU7SUFDcEQsT0FBTyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFFLElBQTZCLENBQUMsUUFBUSxDQUFDO0FBQzVFLENBQUM7QUFGRCx3REFFQztBQUVEOzs7O0dBSUc7QUFDSCxJQUFZLGNBVVg7QUFWRCxXQUFZLGNBQWM7SUFDeEI7O09BRUc7SUFDSCwrQkFBYSxDQUFBO0lBRWI7O09BRUc7SUFDSCw2QkFBVyxDQUFBO0FBQ2IsQ0FBQyxFQVZXLGNBQWMsR0FBZCxzQkFBYyxLQUFkLHNCQUFjLFFBVXpCO0FBRUQsSUFBWSxvQkFrQ1g7QUFsQ0QsV0FBWSxvQkFBb0I7SUFDOUI7O09BRUc7SUFDSCxxQ0FBYSxDQUFBO0lBRWI7Ozs7T0FJRztJQUNILHlFQUFpRCxDQUFBO0lBRWpEOzs7O09BSUc7SUFDSCx5RUFBaUQsQ0FBQTtJQUVqRDs7T0FFRztJQUNILDZEQUFxQyxDQUFBO0lBRXJDOztPQUVHO0lBQ0gsbUVBQTJDLENBQUE7SUFFM0M7O09BRUc7SUFDSCxpRUFBeUMsQ0FBQTtBQUMzQyxDQUFDLEVBbENXLG9CQUFvQixHQUFwQiw0QkFBb0IsS0FBcEIsNEJBQW9CLFFBa0MvQjtBQUVELFNBQWdCLHNCQUFzQixDQUFDLEdBQVc7SUFDaEQsT0FBUSxvQkFBNEIsQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDMUQsQ0FBQztBQUZELHdEQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9jdW1lbnRlZCwgUHJpbWl0aXZlVHlwZSB9IGZyb20gJy4vYmFzZS10eXBlcyc7XG5pbXBvcnQgeyBpc1RhZ1Byb3BlcnR5LCBQcm9wZXJ0eSwgVGFnUHJvcGVydHkgfSBmcm9tICcuL3Byb3BlcnR5JztcblxuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZVR5cGUgZXh0ZW5kcyBEb2N1bWVudGVkIHtcbiAgLyoqXG4gICAqIFRoZSBhdHRyaWJ1dGVzIGV4cG9zZWQgYnkgdGhlIHJlc291cmNlIHR5cGUsIGlmIGFueS5cbiAgICovXG4gIEF0dHJpYnV0ZXM/OiB7IFtuYW1lOiBzdHJpbmddOiBBdHRyaWJ1dGUgfTtcbiAgLyoqXG4gICAqIFRoZSBwcm9wZXJ0aWVzIGFjY2VwdGVkIGJ5IHRoZSByZXNvdXJjZSB0eXBlLCBpZiBhbnkuXG4gICAqL1xuICBQcm9wZXJ0aWVzPzogeyBbbmFtZTogc3RyaW5nXTogUHJvcGVydHkgfTtcbiAgLyoqXG4gICAqIFRoZSBgYFRyYW5zZm9ybWBgIHJlcXVpcmVkIGJ5IHRoZSByZXNvdXJjZSB0eXBlLCBpZiBhbnkuXG4gICAqL1xuICBSZXF1aXJlZFRyYW5zZm9ybT86IHN0cmluZztcblxuICAvKipcbiAgICogV2hhdCBraW5kIG9mIHZhbHVlIHRoZSAnUmVmJyBvcGVyYXRvciByZWZlcnMgdG8sIGlmIGFueS5cbiAgICovXG4gIFJlZktpbmQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIER1cmluZyBhIHN0YWNrIHVwZGF0ZSwgd2hhdCBraW5kIG9mIGFkZGl0aW9uYWwgc2NydXRpbnkgY2hhbmdlcyB0byB0aGlzIHJlc291cmNlIHNob3VsZCBiZSBzdWJqZWN0ZWQgdG9cbiAgICpcbiAgICogQGRlZmF1bHQgTm9uZVxuICAgKi9cbiAgU2NydXRpbnlUeXBlPzogUmVzb3VyY2VTY3J1dGlueVR5cGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFnZ2FibGVSZXNvdXJjZSBleHRlbmRzIFJlc291cmNlVHlwZSB7XG4gIFByb3BlcnRpZXM6IHtcbiAgICBUYWdzOiBUYWdQcm9wZXJ0eTtcbiAgICBbbmFtZTogc3RyaW5nXTogUHJvcGVydHk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgQXR0cmlidXRlID0gUHJpbWl0aXZlQXR0cmlidXRlIHwgTGlzdEF0dHJpYnV0ZTtcblxuZXhwb3J0IGludGVyZmFjZSBQcmltaXRpdmVBdHRyaWJ1dGUge1xuICBQcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlO1xufVxuXG5leHBvcnQgdHlwZSBMaXN0QXR0cmlidXRlID0gUHJpbWl0aXZlTGlzdEF0dHJpYnV0ZSB8IENvbXBsZXhMaXN0QXR0cmlidXRlO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByaW1pdGl2ZUxpc3RBdHRyaWJ1dGUge1xuICBUeXBlOiAnTGlzdCc7XG4gIFByaW1pdGl2ZUl0ZW1UeXBlOiBQcmltaXRpdmVUeXBlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXhMaXN0QXR0cmlidXRlIHtcbiAgVHlwZTogJ0xpc3QnO1xuICBJdGVtVHlwZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB0aGUgcmVzb3VyY2Ugc3VwcG9ydHMgdGFnc1xuICpcbiAqIFRoaXMgZnVuY3Rpb24gY29tYmluZWQgd2l0aCBpc1RhZ1Byb3BlcnR5IGRldGVybWluZXMgaWYgdGhlIGBjZGsuVGFnTWFuYWdlcmBcbiAqIGFuZCBgY2RrLlRhZ2dhYmxlUmVzb3VyY2VgIGNhbiBwcm9jZXNzIHRoZXNlIHRhZ3MuIElmIG5vdCwgc3RhbmRhcmQgY29kZVxuICogZ2VuZXJhdGlvbiBvZiBwcm9wZXJ0aWVzIHdpbGwgYmUgdXNlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVGFnZ2FibGVSZXNvdXJjZShzcGVjOiBSZXNvdXJjZVR5cGUpOiBzcGVjIGlzIFRhZ2dhYmxlUmVzb3VyY2Uge1xuICBpZiAoc3BlYy5Qcm9wZXJ0aWVzICYmIHNwZWMuUHJvcGVydGllcy5UYWdzKSB7XG4gICAgcmV0dXJuIGlzVGFnUHJvcGVydHkoc3BlYy5Qcm9wZXJ0aWVzLlRhZ3MpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlQXR0cmlidXRlKHNwZWM6IEF0dHJpYnV0ZSk6IHNwZWMgaXMgUHJpbWl0aXZlQXR0cmlidXRlIHtcbiAgcmV0dXJuICEhKHNwZWMgYXMgUHJpbWl0aXZlQXR0cmlidXRlKS5QcmltaXRpdmVUeXBlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMaXN0QXR0cmlidXRlKHNwZWM6IEF0dHJpYnV0ZSk6IHNwZWMgaXMgTGlzdEF0dHJpYnV0ZSB7XG4gIHJldHVybiAoc3BlYyBhcyBMaXN0QXR0cmlidXRlKS5UeXBlID09PSAnTGlzdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ByaW1pdGl2ZUxpc3RBdHRyaWJ1dGUoc3BlYzogQXR0cmlidXRlKTogc3BlYyBpcyBQcmltaXRpdmVMaXN0QXR0cmlidXRlIHtcbiAgcmV0dXJuIGlzTGlzdEF0dHJpYnV0ZShzcGVjKSAmJiAhIShzcGVjIGFzIFByaW1pdGl2ZUxpc3RBdHRyaWJ1dGUpLlByaW1pdGl2ZUl0ZW1UeXBlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wbGV4TGlzdEF0dHJpYnV0ZShzcGVjOiBBdHRyaWJ1dGUpOiBzcGVjIGlzIENvbXBsZXhMaXN0QXR0cmlidXRlIHtcbiAgcmV0dXJuIGlzTGlzdEF0dHJpYnV0ZShzcGVjKSAmJiAhIShzcGVjIGFzIENvbXBsZXhMaXN0QXR0cmlidXRlKS5JdGVtVHlwZTtcbn1cblxuLyoqXG4gKiBUeXBlIGRlY2xhcmF0aW9uIGZvciBzcGVjaWFsIHZhbHVlcyBvZiB0aGUgXCJSZWZcIiBhdHRyaWJ1dGUgcmVwcmVzZW50cy5cbiAqXG4gKiBUaGUgYXR0cmlidXRlIGNhbiB0YWtlIG9uIG1vcmUgdmFsdWVzIHRoYW4gdGhlc2UsIGJ1dCB0aGVzZSBhcmUgdHJlYXRlZCBzcGVjaWFsbHkuXG4gKi9cbmV4cG9ydCBlbnVtIFNwZWNpYWxSZWZLaW5kIHtcbiAgLyoqXG4gICAqIE5vICcucmVmJyBtZW1iZXIgaXMgZ2VuZXJhdGVkIGZvciB0aGlzIHR5cGUsIGJlY2F1c2UgaXQgZG9lc24ndCBoYXZlIGEgbWVhbmluZ2Z1bCB2YWx1ZS5cbiAgICovXG4gIE5vbmUgPSAnTm9uZScsXG5cbiAgLyoqXG4gICAqIFRoZSBnZW5lcmF0ZWQgY2xhc3Mgd2lsbCBpbmhlcml0IGZyb20gdGhlIGJ1aWx0LWluICdBcm4nIHR5cGUuXG4gICAqL1xuICBBcm4gPSAnQXJuJ1xufVxuXG5leHBvcnQgZW51bSBSZXNvdXJjZVNjcnV0aW55VHlwZSB7XG4gIC8qKlxuICAgKiBObyBhZGRpdGlvbmFsIHNjcnV0aW55XG4gICAqL1xuICBOb25lID0gJ05vbmUnLFxuXG4gIC8qKlxuICAgKiBBbiBleHRlcm5hbGx5IGF0dGFjaGVkIHBvbGljeSBkb2N1bWVudCB0byBhIHJlc291cmNlXG4gICAqXG4gICAqIChDb21tb24gZm9yIFNRUywgU05TLCBTMywgLi4uKVxuICAgKi9cbiAgUmVzb3VyY2VQb2xpY3lSZXNvdXJjZSA9ICdSZXNvdXJjZVBvbGljeVJlc291cmNlJyxcblxuICAvKipcbiAgICogVGhpcyBpcyBhbiBJQU0gcG9saWN5IG9uIGFuIGlkZW50aXR5IHJlc291cmNlXG4gICAqXG4gICAqIChCYXNpY2FsbHkgc2F5aW5nOiB0aGlzIGlzIEFXUzo6SUFNOjpQb2xpY3kpXG4gICAqL1xuICBJZGVudGl0eVBvbGljeVJlc291cmNlID0gJ0lkZW50aXR5UG9saWN5UmVzb3VyY2UnLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgTGFtYmRhIFBlcm1pc3Npb24gcG9saWN5XG4gICAqL1xuICBMYW1iZGFQZXJtaXNzaW9uID0gJ0xhbWJkYVBlcm1pc3Npb24nLFxuXG4gIC8qKlxuICAgKiBBbiBpbmdyZXNzIHJ1bGUgb2JqZWN0XG4gICAqL1xuICBJbmdyZXNzUnVsZVJlc291cmNlID0gJ0luZ3Jlc3NSdWxlUmVzb3VyY2UnLFxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBlZ3Jlc3MgcnVsZXNcbiAgICovXG4gIEVncmVzc1J1bGVSZXNvdXJjZSA9ICdFZ3Jlc3NSdWxlUmVzb3VyY2UnLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSZXNvdXJjZVNjcnV0aW55VHlwZShzdHI6IHN0cmluZyk6IHN0ciBpcyBSZXNvdXJjZVNjcnV0aW55VHlwZSB7XG4gIHJldHVybiAoUmVzb3VyY2VTY3J1dGlueVR5cGUgYXMgYW55KVtzdHJdICE9PSB1bmRlZmluZWQ7XG59XG4iXX0=