"use strict";
const lib_1 = require("../../lib");
const util_1 = require("../util");
module.exports = {
    'broadening is': {
        'adding of positive statements'(test) {
            // WHEN
            const diff = lib_1.diffTemplate({}, util_1.template({
                QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                    Queues: [{ Ref: 'MyQueue' }],
                    PolicyDocument: util_1.poldoc({
                        Effect: 'Allow',
                        Action: 'sqs:SendMessage',
                        Resource: '*',
                        Principal: { Service: 'sns.amazonaws.com' }
                    })
                })
            }));
            // THEN
            test.equal(diff.permissionsBroadened, true);
            test.done();
        },
        'adding of positive statements to an existing policy'(test) {
            // WHEN
            const diff = lib_1.diffTemplate(util_1.template({
                QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                    Queues: [{ Ref: 'MyQueue' }],
                    PolicyDocument: util_1.poldoc({
                        Effect: 'Allow',
                        Action: 'sqs:SendMessage',
                        Resource: '*',
                        Principal: { Service: 'sns.amazonaws.com' }
                    })
                })
            }), util_1.template({
                QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                    Queues: [{ Ref: 'MyQueue' }],
                    PolicyDocument: util_1.poldoc({
                        Effect: 'Allow',
                        Action: 'sqs:SendMessage',
                        Resource: '*',
                        Principal: { Service: 'sns.amazonaws.com' }
                    }, {
                        Effect: 'Allow',
                        Action: 'sqs:LookAtMessage',
                        Resource: '*',
                        Principal: { Service: 'sns.amazonaws.com' }
                    })
                })
            }));
            // THEN
            test.equal(diff.permissionsBroadened, true);
            test.done();
        },
        'removal of not-statements'(test) {
            // WHEN
            const diff = lib_1.diffTemplate(util_1.template({
                QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                    Queues: [{ Ref: 'MyQueue' }],
                    PolicyDocument: util_1.poldoc({
                        Effect: 'Allow',
                        Action: 'sqs:SendMessage',
                        Resource: '*',
                        NotPrincipal: { Service: 'sns.amazonaws.com' }
                    })
                })
            }), {});
            // THEN
            test.equal(diff.permissionsBroadened, true);
            test.done();
        },
        'changing of resource target'(test) {
            // WHEN
            const diff = lib_1.diffTemplate(util_1.template({
                QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                    Queues: [{ Ref: 'MyQueue' }],
                    PolicyDocument: util_1.poldoc({
                        Effect: 'Allow',
                        Action: 'sqs:SendMessage',
                        Resource: '*',
                        Principal: { Service: 'sns.amazonaws.com' }
                    })
                })
            }), util_1.template({
                QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                    Queues: [{ Ref: 'MyOtherQueue' }],
                    PolicyDocument: util_1.poldoc({
                        Effect: 'Allow',
                        Action: 'sqs:SendMessage',
                        Resource: '*',
                        Principal: { Service: 'sns.amazonaws.com' }
                    })
                })
            }));
            // THEN
            test.equal(diff.permissionsBroadened, true);
            test.done();
        },
        'addition of ingress rules'(test) {
            // WHEN
            const diff = lib_1.diffTemplate(util_1.template({}), util_1.template({
                SG: util_1.resource('AWS::EC2::SecurityGroup', {
                    SecurityGroupIngress: [
                        {
                            CidrIp: '1.2.3.4/8',
                            FromPort: 80,
                            ToPort: 80,
                            IpProtocol: 'tcp',
                        }
                    ],
                })
            }));
            // THEN
            test.equal(diff.permissionsBroadened, true);
            test.done();
        },
        'addition of egress rules'(test) {
            // WHEN
            const diff = lib_1.diffTemplate(util_1.template({}), util_1.template({
                SG: util_1.resource('AWS::EC2::SecurityGroup', {
                    SecurityGroupEgress: [
                        {
                            DestinationSecurityGroupId: { 'Fn::GetAtt': ['ThatOtherGroup', 'GroupId'] },
                            FromPort: 80,
                            ToPort: 80,
                            IpProtocol: 'tcp',
                        }
                    ],
                })
            }));
            // THEN
            test.equal(diff.permissionsBroadened, true);
            test.done();
        },
    },
    'broadening is not': {
        'removal of positive statements from an existing policy'(test) {
            // WHEN
            const diff = lib_1.diffTemplate(util_1.template({
                QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                    Queues: [{ Ref: 'MyQueue' }],
                    PolicyDocument: util_1.poldoc({
                        Effect: 'Allow',
                        Action: 'sqs:SendMessage',
                        Resource: '*',
                        Principal: { Service: 'sns.amazonaws.com' }
                    }, {
                        Effect: 'Allow',
                        Action: 'sqs:LookAtMessage',
                        Resource: '*',
                        Principal: { Service: 'sns.amazonaws.com' }
                    })
                })
            }), util_1.template({
                QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                    Queues: [{ Ref: 'MyQueue' }],
                    PolicyDocument: util_1.poldoc({
                        Effect: 'Allow',
                        Action: 'sqs:SendMessage',
                        Resource: '*',
                        Principal: { Service: 'sns.amazonaws.com' }
                    })
                })
            }));
            // THEN
            test.equal(diff.permissionsBroadened, false);
            test.done();
        },
    }
};
//# sourceMappingURL=data:application/json;base64,