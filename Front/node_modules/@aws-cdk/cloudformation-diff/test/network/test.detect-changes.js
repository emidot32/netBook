"use strict";
const lib_1 = require("../../lib");
const util_1 = require("../util");
module.exports = {
    'detect addition of all types of rules'(test) {
        // WHEN
        const diff = lib_1.diffTemplate({}, util_1.template({
            SG: util_1.resource('AWS::EC2::SecurityGroup', {
                SecurityGroupIngress: [
                    {
                        CidrIp: '1.2.3.4/8',
                        FromPort: 80,
                        ToPort: 80,
                        IpProtocol: 'tcp',
                    }
                ],
                SecurityGroupEgress: [
                    {
                        DestinationSecurityGroupId: { 'Fn::GetAtt': ['ThatOtherGroup', 'GroupId'] },
                        FromPort: 80,
                        ToPort: 80,
                        IpProtocol: 'tcp',
                    }
                ],
            }),
            InRule: util_1.resource('AWS::EC2::SecurityGroupIngress', {
                GroupId: { 'Fn::GetAtt': ['SG', 'GroupId'] },
                FromPort: -1,
                ToPort: -1,
                IpProtocol: 'icmp',
                SourcePrefixListId: 'pl-1234',
            }),
            OutRule: util_1.resource('AWS::EC2::SecurityGroupEgress', {
                GroupId: { 'Fn::GetAtt': ['SG', 'GroupId'] },
                FromPort: -1,
                ToPort: -1,
                IpProtocol: 'udp',
                CidrIp: '7.8.9.0/24',
            }),
        }));
        // THEN
        test.deepEqual(diff.securityGroupChanges.toJson(), {
            ingressRuleAdditions: [
                {
                    groupId: '${SG.GroupId}',
                    ipProtocol: 'tcp',
                    fromPort: 80,
                    toPort: 80,
                    peer: { kind: 'cidr-ip', ip: '1.2.3.4/8' }
                },
                {
                    groupId: '${SG.GroupId}',
                    ipProtocol: 'icmp',
                    fromPort: -1,
                    toPort: -1,
                    peer: { kind: 'prefix-list', prefixListId: 'pl-1234' }
                }
            ],
            egressRuleAdditions: [
                {
                    groupId: '${SG.GroupId}',
                    ipProtocol: 'tcp',
                    fromPort: 80,
                    toPort: 80,
                    peer: { kind: 'security-group', securityGroupId: '${ThatOtherGroup.GroupId}' }
                },
                {
                    groupId: '${SG.GroupId}',
                    ipProtocol: 'udp',
                    fromPort: -1,
                    toPort: -1,
                    peer: { kind: 'cidr-ip', ip: '7.8.9.0/24' }
                }
            ]
        });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5kZXRlY3QtY2hhbmdlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QuZGV0ZWN0LWNoYW5nZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG1DQUF5QztBQUN6QyxrQ0FBNkM7QUFFN0MsaUJBQVM7SUFDUCx1Q0FBdUMsQ0FBQyxJQUFVO1FBQ2hELE9BQU87UUFDUCxNQUFNLElBQUksR0FBRyxrQkFBWSxDQUFDLEVBQUUsRUFBRSxlQUFRLENBQUM7WUFDckMsRUFBRSxFQUFFLGVBQVEsQ0FBQyx5QkFBeUIsRUFBRTtnQkFDdEMsb0JBQW9CLEVBQUU7b0JBQ3BCO3dCQUNFLE1BQU0sRUFBRSxXQUFXO3dCQUNuQixRQUFRLEVBQUUsRUFBRTt3QkFDWixNQUFNLEVBQUUsRUFBRTt3QkFDVixVQUFVLEVBQUUsS0FBSztxQkFDbEI7aUJBQ0Y7Z0JBQ0QsbUJBQW1CLEVBQUU7b0JBQ25CO3dCQUNFLDBCQUEwQixFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLEVBQUU7d0JBQzNFLFFBQVEsRUFBRSxFQUFFO3dCQUNaLE1BQU0sRUFBRSxFQUFFO3dCQUNWLFVBQVUsRUFBRSxLQUFLO3FCQUNsQjtpQkFDRjthQUNGLENBQUM7WUFDRixNQUFNLEVBQUUsZUFBUSxDQUFDLGdDQUFnQyxFQUFFO2dCQUNqRCxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUU7Z0JBQzVDLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBQ1osTUFBTSxFQUFFLENBQUMsQ0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTtnQkFDbEIsa0JBQWtCLEVBQUUsU0FBUzthQUM5QixDQUFDO1lBQ0YsT0FBTyxFQUFFLGVBQVEsQ0FBQywrQkFBK0IsRUFBRTtnQkFDakQsT0FBTyxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFO2dCQUM1QyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUNaLE1BQU0sRUFBRSxDQUFDLENBQUM7Z0JBQ1YsVUFBVSxFQUFFLEtBQUs7Z0JBQ2pCLE1BQU0sRUFBRSxZQUFZO2FBQ3JCLENBQUM7U0FDSCxDQUFDLENBQUMsQ0FBQztRQUVKLE9BQU87UUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNqRCxvQkFBb0IsRUFBRTtnQkFDcEI7b0JBQ0UsT0FBTyxFQUFFLGVBQWU7b0JBQ3hCLFVBQVUsRUFBRSxLQUFLO29CQUNqQixRQUFRLEVBQUUsRUFBRTtvQkFDWixNQUFNLEVBQUUsRUFBRTtvQkFDVixJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUU7aUJBQzNDO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxlQUFlO29CQUN4QixVQUFVLEVBQUUsTUFBTTtvQkFDbEIsUUFBUSxFQUFFLENBQUMsQ0FBQztvQkFDWixNQUFNLEVBQUUsQ0FBQyxDQUFDO29CQUNWLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRTtpQkFDdkQ7YUFDRjtZQUNELG1CQUFtQixFQUFFO2dCQUNuQjtvQkFDRSxPQUFPLEVBQUUsZUFBZTtvQkFDeEIsVUFBVSxFQUFFLEtBQUs7b0JBQ2pCLFFBQVEsRUFBRSxFQUFFO29CQUNaLE1BQU0sRUFBRSxFQUFFO29CQUNWLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsMkJBQTJCLEVBQUU7aUJBQy9FO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxlQUFlO29CQUN4QixVQUFVLEVBQUUsS0FBSztvQkFDakIsUUFBUSxFQUFFLENBQUMsQ0FBQztvQkFDWixNQUFNLEVBQUUsQ0FBQyxDQUFDO29CQUNWLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRTtpQkFDNUM7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IGRpZmZUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgeyByZXNvdXJjZSwgdGVtcGxhdGUgfSBmcm9tICcuLi91dGlsJztcblxuZXhwb3J0ID0ge1xuICAnZGV0ZWN0IGFkZGl0aW9uIG9mIGFsbCB0eXBlcyBvZiBydWxlcycodGVzdDogVGVzdCkge1xuICAgIC8vIFdIRU5cbiAgICBjb25zdCBkaWZmID0gZGlmZlRlbXBsYXRlKHt9LCB0ZW1wbGF0ZSh7XG4gICAgICBTRzogcmVzb3VyY2UoJ0FXUzo6RUMyOjpTZWN1cml0eUdyb3VwJywge1xuICAgICAgICBTZWN1cml0eUdyb3VwSW5ncmVzczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIENpZHJJcDogJzEuMi4zLjQvOCcsXG4gICAgICAgICAgICBGcm9tUG9ydDogODAsXG4gICAgICAgICAgICBUb1BvcnQ6IDgwLFxuICAgICAgICAgICAgSXBQcm90b2NvbDogJ3RjcCcsXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBTZWN1cml0eUdyb3VwRWdyZXNzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgRGVzdGluYXRpb25TZWN1cml0eUdyb3VwSWQ6IHsgJ0ZuOjpHZXRBdHQnOiBbJ1RoYXRPdGhlckdyb3VwJywgJ0dyb3VwSWQnXSB9LFxuICAgICAgICAgICAgRnJvbVBvcnQ6IDgwLFxuICAgICAgICAgICAgVG9Qb3J0OiA4MCxcbiAgICAgICAgICAgIElwUHJvdG9jb2w6ICd0Y3AnLFxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgIH0pLFxuICAgICAgSW5SdWxlOiByZXNvdXJjZSgnQVdTOjpFQzI6OlNlY3VyaXR5R3JvdXBJbmdyZXNzJywge1xuICAgICAgICBHcm91cElkOiB7ICdGbjo6R2V0QXR0JzogWydTRycsICdHcm91cElkJ10gfSxcbiAgICAgICAgRnJvbVBvcnQ6IC0xLFxuICAgICAgICBUb1BvcnQ6IC0xLFxuICAgICAgICBJcFByb3RvY29sOiAnaWNtcCcsXG4gICAgICAgIFNvdXJjZVByZWZpeExpc3RJZDogJ3BsLTEyMzQnLFxuICAgICAgfSksXG4gICAgICBPdXRSdWxlOiByZXNvdXJjZSgnQVdTOjpFQzI6OlNlY3VyaXR5R3JvdXBFZ3Jlc3MnLCB7XG4gICAgICAgIEdyb3VwSWQ6IHsgJ0ZuOjpHZXRBdHQnOiBbJ1NHJywgJ0dyb3VwSWQnXSB9LFxuICAgICAgICBGcm9tUG9ydDogLTEsXG4gICAgICAgIFRvUG9ydDogLTEsXG4gICAgICAgIElwUHJvdG9jb2w6ICd1ZHAnLFxuICAgICAgICBDaWRySXA6ICc3LjguOS4wLzI0JyxcbiAgICAgIH0pLFxuICAgIH0pKTtcblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0LmRlZXBFcXVhbChkaWZmLnNlY3VyaXR5R3JvdXBDaGFuZ2VzLnRvSnNvbigpLCB7XG4gICAgICBpbmdyZXNzUnVsZUFkZGl0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgZ3JvdXBJZDogJyR7U0cuR3JvdXBJZH0nLFxuICAgICAgICAgIGlwUHJvdG9jb2w6ICd0Y3AnLFxuICAgICAgICAgIGZyb21Qb3J0OiA4MCxcbiAgICAgICAgICB0b1BvcnQ6IDgwLFxuICAgICAgICAgIHBlZXI6IHsga2luZDogJ2NpZHItaXAnLCBpcDogJzEuMi4zLjQvOCcgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZ3JvdXBJZDogJyR7U0cuR3JvdXBJZH0nLFxuICAgICAgICAgIGlwUHJvdG9jb2w6ICdpY21wJyxcbiAgICAgICAgICBmcm9tUG9ydDogLTEsXG4gICAgICAgICAgdG9Qb3J0OiAtMSxcbiAgICAgICAgICBwZWVyOiB7IGtpbmQ6ICdwcmVmaXgtbGlzdCcsIHByZWZpeExpc3RJZDogJ3BsLTEyMzQnIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGVncmVzc1J1bGVBZGRpdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGdyb3VwSWQ6ICcke1NHLkdyb3VwSWR9JyxcbiAgICAgICAgICBpcFByb3RvY29sOiAndGNwJyxcbiAgICAgICAgICBmcm9tUG9ydDogODAsXG4gICAgICAgICAgdG9Qb3J0OiA4MCxcbiAgICAgICAgICBwZWVyOiB7IGtpbmQ6ICdzZWN1cml0eS1ncm91cCcsIHNlY3VyaXR5R3JvdXBJZDogJyR7VGhhdE90aGVyR3JvdXAuR3JvdXBJZH0nIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGdyb3VwSWQ6ICcke1NHLkdyb3VwSWR9JyxcbiAgICAgICAgICBpcFByb3RvY29sOiAndWRwJyxcbiAgICAgICAgICBmcm9tUG9ydDogLTEsXG4gICAgICAgICAgdG9Qb3J0OiAtMSxcbiAgICAgICAgICBwZWVyOiB7IGtpbmQ6ICdjaWRyLWlwJywgaXA6ICc3LjguOS4wLzI0JyB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9XG59O1xuIl19