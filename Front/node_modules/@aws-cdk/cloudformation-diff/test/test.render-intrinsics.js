"use strict";
const render_intrinsics_1 = require("../lib/render-intrinsics");
module.exports = {
    'resolves Ref'(test) {
        test.equals(render_intrinsics_1.renderIntrinsics({ Ref: 'SomeLogicalId' }), '${SomeLogicalId}');
        test.done();
    },
    'resolves Fn::GetAtt'(test) {
        test.equals(render_intrinsics_1.renderIntrinsics({ 'Fn::GetAtt': ['SomeLogicalId', 'Attribute'] }), '${SomeLogicalId.Attribute}');
        test.done();
    },
    'resolves Fn::Join'(test) {
        test.equals(render_intrinsics_1.renderIntrinsics({ 'Fn::Join': ['/', ['a', 'b', 'c']] }), 'a/b/c');
        test.done();
    },
    'removes AWS::NoValue from Fn::Join'(test) {
        test.equals(render_intrinsics_1.renderIntrinsics({ 'Fn::Join': ['/', ['a', { Ref: 'AWS::NoValue' }, 'b', 'c']] }), 'a/b/c');
        test.done();
    },
    'does not resolve Fn::Join if the second argument is not a list literal'(test) {
        test.equals(render_intrinsics_1.renderIntrinsics({ 'Fn::Join': ['/', { Ref: 'ListParameter' }] }), '{"Fn::Join":["/","${ListParameter}"]}');
        test.done();
    },
    'deep resolves intrinsics in object'(test) {
        test.deepEqual(render_intrinsics_1.renderIntrinsics({
            Deeper1: { Ref: 'SomeLogicalId' },
            Deeper2: 'Do not replace',
        }), {
            Deeper1: '${SomeLogicalId}',
            Deeper2: 'Do not replace',
        });
        test.done();
    },
    'deep resolves intrinsics in array'(test) {
        test.deepEqual(render_intrinsics_1.renderIntrinsics([
            { Ref: 'SomeLogicalId' },
            'Do not replace',
        ]), [
            '${SomeLogicalId}',
            'Do not replace',
        ]);
        test.done();
    },
    'removes NoValue from object'(test) {
        test.deepEqual(render_intrinsics_1.renderIntrinsics({
            Deeper1: { Ref: 'SomeLogicalId' },
            Deeper2: { Ref: 'AWS::NoValue' }
        }), {
            Deeper1: '${SomeLogicalId}',
        });
        test.done();
    },
    'removes NoValue from array'(test) {
        test.deepEqual(render_intrinsics_1.renderIntrinsics([
            { Ref: 'SomeLogicalId' },
            { Ref: 'AWS::NoValue' },
        ]), [
            '${SomeLogicalId}',
        ]);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5yZW5kZXItaW50cmluc2ljcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QucmVuZGVyLWludHJpbnNpY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLGdFQUE0RDtBQUU1RCxpQkFBUztJQUNQLGNBQWMsQ0FBQyxJQUFVO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQ1Qsb0NBQWdCLENBQUMsRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFDMUMsa0JBQWtCLENBQ25CLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQscUJBQXFCLENBQUMsSUFBVTtRQUM5QixJQUFJLENBQUMsTUFBTSxDQUNULG9DQUFnQixDQUFDLEVBQUUsWUFBWSxFQUFFLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFDbEUsNEJBQTRCLENBQzdCLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsbUJBQW1CLENBQUMsSUFBVTtRQUM1QixJQUFJLENBQUMsTUFBTSxDQUNULG9DQUFnQixDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDeEQsT0FBTyxDQUNSLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsb0NBQW9DLENBQUMsSUFBVTtRQUM3QyxJQUFJLENBQUMsTUFBTSxDQUNULG9DQUFnQixDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDakYsT0FBTyxDQUNSLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsd0VBQXdFLENBQUMsSUFBVTtRQUNqRixJQUFJLENBQUMsTUFBTSxDQUNULG9DQUFnQixDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLGVBQWUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNqRSx1Q0FBdUMsQ0FDeEMsQ0FBQztRQUVGLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxvQ0FBb0MsQ0FBQyxJQUFVO1FBQzdDLElBQUksQ0FBQyxTQUFTLENBQ1osb0NBQWdCLENBQUM7WUFDZixPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFO1lBQ2pDLE9BQU8sRUFBRSxnQkFBZ0I7U0FDMUIsQ0FBQyxFQUNGO1lBQ0UsT0FBTyxFQUFFLGtCQUFrQjtZQUMzQixPQUFPLEVBQUUsZ0JBQWdCO1NBQzFCLENBQ0YsQ0FBQztRQUNGLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxtQ0FBbUMsQ0FBQyxJQUFVO1FBQzVDLElBQUksQ0FBQyxTQUFTLENBQ1osb0NBQWdCLENBQUM7WUFDZixFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUU7WUFDeEIsZ0JBQWdCO1NBQ2pCLENBQUMsRUFDRjtZQUNFLGtCQUFrQjtZQUNsQixnQkFBZ0I7U0FDakIsQ0FDRixDQUFDO1FBQ0YsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELDZCQUE2QixDQUFDLElBQVU7UUFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FDWixvQ0FBZ0IsQ0FBQztZQUNmLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUU7WUFDakMsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRTtTQUNqQyxDQUFDLEVBQ0Y7WUFDRSxPQUFPLEVBQUUsa0JBQWtCO1NBQzVCLENBQ0YsQ0FBQztRQUNGLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCw0QkFBNEIsQ0FBQyxJQUFVO1FBQ3JDLElBQUksQ0FBQyxTQUFTLENBQ1osb0NBQWdCLENBQUM7WUFDZixFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUU7WUFDeEIsRUFBRSxHQUFHLEVBQUUsY0FBYyxFQUFFO1NBQ3hCLENBQUMsRUFDRjtZQUNFLGtCQUFrQjtTQUNuQixDQUNGLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyByZW5kZXJJbnRyaW5zaWNzIH0gZnJvbSAnLi4vbGliL3JlbmRlci1pbnRyaW5zaWNzJztcblxuZXhwb3J0ID0ge1xuICAncmVzb2x2ZXMgUmVmJyh0ZXN0OiBUZXN0KSB7XG4gICAgdGVzdC5lcXVhbHMoXG4gICAgICByZW5kZXJJbnRyaW5zaWNzKHsgUmVmOiAnU29tZUxvZ2ljYWxJZCcgfSksXG4gICAgICAnJHtTb21lTG9naWNhbElkfSdcbiAgICApO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdyZXNvbHZlcyBGbjo6R2V0QXR0Jyh0ZXN0OiBUZXN0KSB7XG4gICAgdGVzdC5lcXVhbHMoXG4gICAgICByZW5kZXJJbnRyaW5zaWNzKHsgJ0ZuOjpHZXRBdHQnOiBbJ1NvbWVMb2dpY2FsSWQnLCAnQXR0cmlidXRlJ10gfSksXG4gICAgICAnJHtTb21lTG9naWNhbElkLkF0dHJpYnV0ZX0nXG4gICAgKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAncmVzb2x2ZXMgRm46OkpvaW4nKHRlc3Q6IFRlc3QpIHtcbiAgICB0ZXN0LmVxdWFscyhcbiAgICAgIHJlbmRlckludHJpbnNpY3MoeyAnRm46OkpvaW4nOiBbJy8nLCBbJ2EnLCAnYicsICdjJ11dIH0pLFxuICAgICAgJ2EvYi9jJ1xuICAgICk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAncmVtb3ZlcyBBV1M6Ok5vVmFsdWUgZnJvbSBGbjo6Sm9pbicodGVzdDogVGVzdCkge1xuICAgIHRlc3QuZXF1YWxzKFxuICAgICAgcmVuZGVySW50cmluc2ljcyh7ICdGbjo6Sm9pbic6IFsnLycsIFsnYScsIHsgUmVmOiAnQVdTOjpOb1ZhbHVlJyB9LCAnYicsICdjJ11dIH0pLFxuICAgICAgJ2EvYi9jJ1xuICAgICk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnZG9lcyBub3QgcmVzb2x2ZSBGbjo6Sm9pbiBpZiB0aGUgc2Vjb25kIGFyZ3VtZW50IGlzIG5vdCBhIGxpc3QgbGl0ZXJhbCcodGVzdDogVGVzdCkge1xuICAgIHRlc3QuZXF1YWxzKFxuICAgICAgcmVuZGVySW50cmluc2ljcyh7ICdGbjo6Sm9pbic6IFsnLycsIHsgUmVmOiAnTGlzdFBhcmFtZXRlcicgfV0gfSksXG4gICAgICAne1wiRm46OkpvaW5cIjpbXCIvXCIsXCIke0xpc3RQYXJhbWV0ZXJ9XCJdfSdcbiAgICApO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2RlZXAgcmVzb2x2ZXMgaW50cmluc2ljcyBpbiBvYmplY3QnKHRlc3Q6IFRlc3QpIHtcbiAgICB0ZXN0LmRlZXBFcXVhbChcbiAgICAgIHJlbmRlckludHJpbnNpY3Moe1xuICAgICAgICBEZWVwZXIxOiB7IFJlZjogJ1NvbWVMb2dpY2FsSWQnIH0sXG4gICAgICAgIERlZXBlcjI6ICdEbyBub3QgcmVwbGFjZScsXG4gICAgICB9KSxcbiAgICAgIHtcbiAgICAgICAgRGVlcGVyMTogJyR7U29tZUxvZ2ljYWxJZH0nLFxuICAgICAgICBEZWVwZXIyOiAnRG8gbm90IHJlcGxhY2UnLFxuICAgICAgfVxuICAgICk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2RlZXAgcmVzb2x2ZXMgaW50cmluc2ljcyBpbiBhcnJheScodGVzdDogVGVzdCkge1xuICAgIHRlc3QuZGVlcEVxdWFsKFxuICAgICAgcmVuZGVySW50cmluc2ljcyhbXG4gICAgICAgIHsgUmVmOiAnU29tZUxvZ2ljYWxJZCcgfSxcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlJyxcbiAgICAgIF0pLFxuICAgICAgW1xuICAgICAgICAnJHtTb21lTG9naWNhbElkfScsXG4gICAgICAgICdEbyBub3QgcmVwbGFjZScsXG4gICAgICBdXG4gICAgKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAncmVtb3ZlcyBOb1ZhbHVlIGZyb20gb2JqZWN0Jyh0ZXN0OiBUZXN0KSB7XG4gICAgdGVzdC5kZWVwRXF1YWwoXG4gICAgICByZW5kZXJJbnRyaW5zaWNzKHtcbiAgICAgICAgRGVlcGVyMTogeyBSZWY6ICdTb21lTG9naWNhbElkJyB9LFxuICAgICAgICBEZWVwZXIyOiB7IFJlZjogJ0FXUzo6Tm9WYWx1ZScgfVxuICAgICAgfSksXG4gICAgICB7XG4gICAgICAgIERlZXBlcjE6ICcke1NvbWVMb2dpY2FsSWR9JyxcbiAgICAgIH1cbiAgICApO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdyZW1vdmVzIE5vVmFsdWUgZnJvbSBhcnJheScodGVzdDogVGVzdCkge1xuICAgIHRlc3QuZGVlcEVxdWFsKFxuICAgICAgcmVuZGVySW50cmluc2ljcyhbXG4gICAgICAgIHsgUmVmOiAnU29tZUxvZ2ljYWxJZCcgfSxcbiAgICAgICAgeyBSZWY6ICdBV1M6Ok5vVmFsdWUnIH0sXG4gICAgICBdKSxcbiAgICAgIFtcbiAgICAgICAgJyR7U29tZUxvZ2ljYWxJZH0nLFxuICAgICAgXVxuICAgICk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG59O1xuIl19